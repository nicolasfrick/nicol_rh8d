
atxmega_qenc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00802000  000011a8  0000123c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00802040  00802040  0000127c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007589  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f0e  00000000  00000000  00008ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024bb  00000000  00000000  0000b9cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c58  00000000  00000000  0000de8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002c424  00000000  00000000  0000eae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000217f  00000000  00000000  0003af08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  0003d087  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001105  00000000  00000000  0003d297  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	16 c1       	rjmp	.+556    	; 0x232 <__bad_interrupt>
       6:	00 00       	nop
       8:	14 c1       	rjmp	.+552    	; 0x232 <__bad_interrupt>
       a:	00 00       	nop
       c:	12 c1       	rjmp	.+548    	; 0x232 <__bad_interrupt>
       e:	00 00       	nop
      10:	10 c1       	rjmp	.+544    	; 0x232 <__bad_interrupt>
      12:	00 00       	nop
      14:	0e c1       	rjmp	.+540    	; 0x232 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c c1       	rjmp	.+536    	; 0x232 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0a c1       	rjmp	.+532    	; 0x232 <__bad_interrupt>
      1e:	00 00       	nop
      20:	08 c1       	rjmp	.+528    	; 0x232 <__bad_interrupt>
      22:	00 00       	nop
      24:	06 c1       	rjmp	.+524    	; 0x232 <__bad_interrupt>
      26:	00 00       	nop
      28:	04 c1       	rjmp	.+520    	; 0x232 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	02 c1       	rjmp	.+516    	; 0x232 <__bad_interrupt>
      2e:	00 00       	nop
      30:	00 c1       	rjmp	.+512    	; 0x232 <__bad_interrupt>
      32:	00 00       	nop
      34:	fe c0       	rjmp	.+508    	; 0x232 <__bad_interrupt>
      36:	00 00       	nop
      38:	0e c1       	rjmp	.+540    	; 0x256 <__vector_14>
      3a:	00 00       	nop
      3c:	35 c1       	rjmp	.+618    	; 0x2a8 <__vector_15>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__vector_16>
      42:	00 00       	nop
      44:	83 c1       	rjmp	.+774    	; 0x34c <__vector_17>
      46:	00 00       	nop
      48:	aa c1       	rjmp	.+852    	; 0x39e <__vector_18>
      4a:	00 00       	nop
      4c:	d1 c1       	rjmp	.+930    	; 0x3f0 <__vector_19>
      4e:	00 00       	nop
      50:	f8 c1       	rjmp	.+1008   	; 0x442 <__vector_20>
      52:	00 00       	nop
      54:	1f c2       	rjmp	.+1086   	; 0x494 <__vector_21>
      56:	00 00       	nop
      58:	46 c2       	rjmp	.+1164   	; 0x4e6 <__vector_22>
      5a:	00 00       	nop
      5c:	6d c2       	rjmp	.+1242   	; 0x538 <__vector_23>
      5e:	00 00       	nop
      60:	e8 c0       	rjmp	.+464    	; 0x232 <__bad_interrupt>
      62:	00 00       	nop
      64:	e6 c0       	rjmp	.+460    	; 0x232 <__bad_interrupt>
      66:	00 00       	nop
      68:	e4 c0       	rjmp	.+456    	; 0x232 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e2 c0       	rjmp	.+452    	; 0x232 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e0 c0       	rjmp	.+448    	; 0x232 <__bad_interrupt>
      72:	00 00       	nop
      74:	de c0       	rjmp	.+444    	; 0x232 <__bad_interrupt>
      76:	00 00       	nop
      78:	dc c0       	rjmp	.+440    	; 0x232 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	da c0       	rjmp	.+436    	; 0x232 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d8 c0       	rjmp	.+432    	; 0x232 <__bad_interrupt>
      82:	00 00       	nop
      84:	d6 c0       	rjmp	.+428    	; 0x232 <__bad_interrupt>
      86:	00 00       	nop
      88:	d4 c0       	rjmp	.+424    	; 0x232 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d2 c0       	rjmp	.+420    	; 0x232 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d0 c0       	rjmp	.+416    	; 0x232 <__bad_interrupt>
      92:	00 00       	nop
      94:	ce c0       	rjmp	.+412    	; 0x232 <__bad_interrupt>
      96:	00 00       	nop
      98:	cc c0       	rjmp	.+408    	; 0x232 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ca c0       	rjmp	.+404    	; 0x232 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c8 c0       	rjmp	.+400    	; 0x232 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c6 c0       	rjmp	.+396    	; 0x232 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c4 c0       	rjmp	.+392    	; 0x232 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c2 c0       	rjmp	.+388    	; 0x232 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c0 c0       	rjmp	.+384    	; 0x232 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	be c0       	rjmp	.+380    	; 0x232 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bc c0       	rjmp	.+376    	; 0x232 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	00 c4       	rjmp	.+2048   	; 0x8be <__vector_47>
      be:	00 00       	nop
      c0:	27 c4       	rjmp	.+2126   	; 0x910 <__vector_48>
      c2:	00 00       	nop
      c4:	4e c4       	rjmp	.+2204   	; 0x962 <__vector_49>
      c6:	00 00       	nop
      c8:	75 c4       	rjmp	.+2282   	; 0x9b4 <__vector_50>
      ca:	00 00       	nop
      cc:	9c c4       	rjmp	.+2360   	; 0xa06 <__vector_51>
      ce:	00 00       	nop
      d0:	c3 c4       	rjmp	.+2438   	; 0xa58 <__vector_52>
      d2:	00 00       	nop
      d4:	ae c0       	rjmp	.+348    	; 0x232 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ac c0       	rjmp	.+344    	; 0x232 <__bad_interrupt>
      da:	00 00       	nop
      dc:	aa c0       	rjmp	.+340    	; 0x232 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a8 c0       	rjmp	.+336    	; 0x232 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a6 c0       	rjmp	.+332    	; 0x232 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	25 c5       	rjmp	.+2634   	; 0xb34 <__vector_58>
      ea:	00 00       	nop
      ec:	a2 c0       	rjmp	.+324    	; 0x232 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a0 c0       	rjmp	.+320    	; 0x232 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	9e c0       	rjmp	.+316    	; 0x232 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9c c0       	rjmp	.+312    	; 0x232 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9a c0       	rjmp	.+308    	; 0x232 <__bad_interrupt>
      fe:	00 00       	nop
     100:	98 c0       	rjmp	.+304    	; 0x232 <__bad_interrupt>
     102:	00 00       	nop
     104:	96 c0       	rjmp	.+300    	; 0x232 <__bad_interrupt>
     106:	00 00       	nop
     108:	94 c0       	rjmp	.+296    	; 0x232 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	92 c0       	rjmp	.+292    	; 0x232 <__bad_interrupt>
     10e:	00 00       	nop
     110:	90 c0       	rjmp	.+288    	; 0x232 <__bad_interrupt>
     112:	00 00       	nop
     114:	8e c0       	rjmp	.+284    	; 0x232 <__bad_interrupt>
     116:	00 00       	nop
     118:	8c c0       	rjmp	.+280    	; 0x232 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8a c0       	rjmp	.+276    	; 0x232 <__bad_interrupt>
     11e:	00 00       	nop
     120:	88 c0       	rjmp	.+272    	; 0x232 <__bad_interrupt>
     122:	00 00       	nop
     124:	86 c0       	rjmp	.+268    	; 0x232 <__bad_interrupt>
     126:	00 00       	nop
     128:	84 c0       	rjmp	.+264    	; 0x232 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	82 c0       	rjmp	.+260    	; 0x232 <__bad_interrupt>
     12e:	00 00       	nop
     130:	80 c0       	rjmp	.+256    	; 0x232 <__bad_interrupt>
     132:	00 00       	nop
     134:	2a c2       	rjmp	.+1108   	; 0x58a <__vector_77>
     136:	00 00       	nop
     138:	51 c2       	rjmp	.+1186   	; 0x5dc <__vector_78>
     13a:	00 00       	nop
     13c:	78 c2       	rjmp	.+1264   	; 0x62e <__vector_79>
     13e:	00 00       	nop
     140:	9f c2       	rjmp	.+1342   	; 0x680 <__vector_80>
     142:	00 00       	nop
     144:	c6 c2       	rjmp	.+1420   	; 0x6d2 <__vector_81>
     146:	00 00       	nop
     148:	ed c2       	rjmp	.+1498   	; 0x724 <__vector_82>
     14a:	00 00       	nop
     14c:	14 c3       	rjmp	.+1576   	; 0x776 <__vector_83>
     14e:	00 00       	nop
     150:	3b c3       	rjmp	.+1654   	; 0x7c8 <__vector_84>
     152:	00 00       	nop
     154:	62 c3       	rjmp	.+1732   	; 0x81a <__vector_85>
     156:	00 00       	nop
     158:	89 c3       	rjmp	.+1810   	; 0x86c <__vector_86>
     15a:	00 00       	nop
     15c:	6a c0       	rjmp	.+212    	; 0x232 <__bad_interrupt>
     15e:	00 00       	nop
     160:	68 c0       	rjmp	.+208    	; 0x232 <__bad_interrupt>
     162:	00 00       	nop
     164:	66 c0       	rjmp	.+204    	; 0x232 <__bad_interrupt>
     166:	00 00       	nop
     168:	64 c0       	rjmp	.+200    	; 0x232 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	62 c0       	rjmp	.+196    	; 0x232 <__bad_interrupt>
     16e:	00 00       	nop
     170:	60 c0       	rjmp	.+192    	; 0x232 <__bad_interrupt>
     172:	00 00       	nop
     174:	5e c0       	rjmp	.+188    	; 0x232 <__bad_interrupt>
     176:	00 00       	nop
     178:	5c c0       	rjmp	.+184    	; 0x232 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5a c0       	rjmp	.+180    	; 0x232 <__bad_interrupt>
     17e:	00 00       	nop
     180:	58 c0       	rjmp	.+176    	; 0x232 <__bad_interrupt>
     182:	00 00       	nop
     184:	56 c0       	rjmp	.+172    	; 0x232 <__bad_interrupt>
     186:	00 00       	nop
     188:	54 c0       	rjmp	.+168    	; 0x232 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	52 c0       	rjmp	.+164    	; 0x232 <__bad_interrupt>
     18e:	00 00       	nop
     190:	50 c0       	rjmp	.+160    	; 0x232 <__bad_interrupt>
     192:	00 00       	nop
     194:	4e c0       	rjmp	.+156    	; 0x232 <__bad_interrupt>
     196:	00 00       	nop
     198:	4c c0       	rjmp	.+152    	; 0x232 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4a c0       	rjmp	.+148    	; 0x232 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	48 c0       	rjmp	.+144    	; 0x232 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	46 c0       	rjmp	.+140    	; 0x232 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	44 c0       	rjmp	.+136    	; 0x232 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	42 c0       	rjmp	.+132    	; 0x232 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	40 c0       	rjmp	.+128    	; 0x232 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	3e c0       	rjmp	.+124    	; 0x232 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	3c c0       	rjmp	.+120    	; 0x232 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3a c0       	rjmp	.+116    	; 0x232 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	38 c0       	rjmp	.+112    	; 0x232 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	36 c0       	rjmp	.+108    	; 0x232 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	34 c0       	rjmp	.+104    	; 0x232 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	32 c0       	rjmp	.+100    	; 0x232 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	30 c0       	rjmp	.+96     	; 0x232 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	2e c0       	rjmp	.+92     	; 0x232 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2c c0       	rjmp	.+88     	; 0x232 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2a c0       	rjmp	.+84     	; 0x232 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	28 c0       	rjmp	.+80     	; 0x232 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	26 c0       	rjmp	.+76     	; 0x232 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	24 c0       	rjmp	.+72     	; 0x232 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	22 c0       	rjmp	.+68     	; 0x232 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	20 c0       	rjmp	.+64     	; 0x232 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	1e c0       	rjmp	.+60     	; 0x232 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	1c c0       	rjmp	.+56     	; 0x232 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e8 ea       	ldi	r30, 0xA8	; 168
     210:	f1 e1       	ldi	r31, 0x11	; 17
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a0 34       	cpi	r26, 0x40	; 64
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	20 e2       	ldi	r18, 0x20	; 32
     220:	a0 e4       	ldi	r26, 0x40	; 64
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a4 37       	cpi	r26, 0x74	; 116
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	6f d4       	rcall	.+2270   	; 0xb0e <main>
     230:	b9 c7       	rjmp	.+3954   	; 0x11a4 <_exit>

00000232 <__bad_interrupt>:
     232:	e6 ce       	rjmp	.-564    	; 0x0 <__vectors>

00000234 <qdec_get_position>:
	tc_write_count(config->timer, 0);
}

uint16_t qdec_get_position(qdec_config_t *config)
{
	return tc_read_count(config->timer);
     234:	dc 01       	movw	r26, r24
     236:	1b 96       	adiw	r26, 0x0b	; 11
     238:	ed 91       	ld	r30, X+
     23a:	fc 91       	ld	r31, X
     23c:	1c 97       	sbiw	r26, 0x0c	; 12
 * \param tc Pointer to TC module.
 * \note Output the Counter value CNT
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	return (((TC0_t *)tc)->CNT);
     23e:	80 a1       	ldd	r24, Z+32	; 0x20
     240:	91 a1       	ldd	r25, Z+33	; 0x21
}
     242:	08 95       	ret

00000244 <qdec_get_direction>:
{
#if XMEGA_E
	return !(((TC5_t *)config->timer)->CTRLGSET & TC5_DIR_bm);

#else
	return !(((TC0_t *)config->timer)->CTRLFSET & TC0_DIR_bm);
     244:	dc 01       	movw	r26, r24
     246:	1b 96       	adiw	r26, 0x0b	; 11
     248:	ed 91       	ld	r30, X+
     24a:	fc 91       	ld	r31, X
     24c:	1c 97       	sbiw	r26, 0x0c	; 12
     24e:	81 85       	ldd	r24, Z+9	; 0x09
     250:	80 95       	com	r24

#endif
}
     252:	81 70       	andi	r24, 0x01	; 1
     254:	08 95       	ret

00000256 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     256:	1f 92       	push	r1
     258:	0f 92       	push	r0
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	0f 92       	push	r0
     25e:	11 24       	eor	r1, r1
     260:	2f 93       	push	r18
     262:	3f 93       	push	r19
     264:	4f 93       	push	r20
     266:	5f 93       	push	r21
     268:	6f 93       	push	r22
     26a:	7f 93       	push	r23
     26c:	8f 93       	push	r24
     26e:	9f 93       	push	r25
     270:	af 93       	push	r26
     272:	bf 93       	push	r27
     274:	ef 93       	push	r30
     276:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     278:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <tc_tcc0_ovf_callback>
     27c:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <tc_tcc0_ovf_callback+0x1>
     280:	30 97       	sbiw	r30, 0x00	; 0
     282:	09 f0       	breq	.+2      	; 0x286 <__vector_14+0x30>
		tc_tcc0_ovf_callback();
     284:	09 95       	icall
	}
}
     286:	ff 91       	pop	r31
     288:	ef 91       	pop	r30
     28a:	bf 91       	pop	r27
     28c:	af 91       	pop	r26
     28e:	9f 91       	pop	r25
     290:	8f 91       	pop	r24
     292:	7f 91       	pop	r23
     294:	6f 91       	pop	r22
     296:	5f 91       	pop	r21
     298:	4f 91       	pop	r20
     29a:	3f 91       	pop	r19
     29c:	2f 91       	pop	r18
     29e:	0f 90       	pop	r0
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	0f 90       	pop	r0
     2a4:	1f 90       	pop	r1
     2a6:	18 95       	reti

000002a8 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     2a8:	1f 92       	push	r1
     2aa:	0f 92       	push	r0
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	0f 92       	push	r0
     2b0:	11 24       	eor	r1, r1
     2b2:	2f 93       	push	r18
     2b4:	3f 93       	push	r19
     2b6:	4f 93       	push	r20
     2b8:	5f 93       	push	r21
     2ba:	6f 93       	push	r22
     2bc:	7f 93       	push	r23
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	af 93       	push	r26
     2c4:	bf 93       	push	r27
     2c6:	ef 93       	push	r30
     2c8:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     2ca:	e0 91 70 20 	lds	r30, 0x2070	; 0x802070 <tc_tcc0_err_callback>
     2ce:	f0 91 71 20 	lds	r31, 0x2071	; 0x802071 <tc_tcc0_err_callback+0x1>
     2d2:	30 97       	sbiw	r30, 0x00	; 0
     2d4:	09 f0       	breq	.+2      	; 0x2d8 <__vector_15+0x30>
		tc_tcc0_err_callback();
     2d6:	09 95       	icall
	}
}
     2d8:	ff 91       	pop	r31
     2da:	ef 91       	pop	r30
     2dc:	bf 91       	pop	r27
     2de:	af 91       	pop	r26
     2e0:	9f 91       	pop	r25
     2e2:	8f 91       	pop	r24
     2e4:	7f 91       	pop	r23
     2e6:	6f 91       	pop	r22
     2e8:	5f 91       	pop	r21
     2ea:	4f 91       	pop	r20
     2ec:	3f 91       	pop	r19
     2ee:	2f 91       	pop	r18
     2f0:	0f 90       	pop	r0
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	0f 90       	pop	r0
     2f6:	1f 90       	pop	r1
     2f8:	18 95       	reti

000002fa <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     2fa:	1f 92       	push	r1
     2fc:	0f 92       	push	r0
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	0f 92       	push	r0
     302:	11 24       	eor	r1, r1
     304:	2f 93       	push	r18
     306:	3f 93       	push	r19
     308:	4f 93       	push	r20
     30a:	5f 93       	push	r21
     30c:	6f 93       	push	r22
     30e:	7f 93       	push	r23
     310:	8f 93       	push	r24
     312:	9f 93       	push	r25
     314:	af 93       	push	r26
     316:	bf 93       	push	r27
     318:	ef 93       	push	r30
     31a:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     31c:	e0 91 6e 20 	lds	r30, 0x206E	; 0x80206e <tc_tcc0_cca_callback>
     320:	f0 91 6f 20 	lds	r31, 0x206F	; 0x80206f <tc_tcc0_cca_callback+0x1>
     324:	30 97       	sbiw	r30, 0x00	; 0
     326:	09 f0       	breq	.+2      	; 0x32a <__vector_16+0x30>
		tc_tcc0_cca_callback();
     328:	09 95       	icall
	}
}
     32a:	ff 91       	pop	r31
     32c:	ef 91       	pop	r30
     32e:	bf 91       	pop	r27
     330:	af 91       	pop	r26
     332:	9f 91       	pop	r25
     334:	8f 91       	pop	r24
     336:	7f 91       	pop	r23
     338:	6f 91       	pop	r22
     33a:	5f 91       	pop	r21
     33c:	4f 91       	pop	r20
     33e:	3f 91       	pop	r19
     340:	2f 91       	pop	r18
     342:	0f 90       	pop	r0
     344:	0f be       	out	0x3f, r0	; 63
     346:	0f 90       	pop	r0
     348:	1f 90       	pop	r1
     34a:	18 95       	reti

0000034c <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     34c:	1f 92       	push	r1
     34e:	0f 92       	push	r0
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	0f 92       	push	r0
     354:	11 24       	eor	r1, r1
     356:	2f 93       	push	r18
     358:	3f 93       	push	r19
     35a:	4f 93       	push	r20
     35c:	5f 93       	push	r21
     35e:	6f 93       	push	r22
     360:	7f 93       	push	r23
     362:	8f 93       	push	r24
     364:	9f 93       	push	r25
     366:	af 93       	push	r26
     368:	bf 93       	push	r27
     36a:	ef 93       	push	r30
     36c:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     36e:	e0 91 6c 20 	lds	r30, 0x206C	; 0x80206c <tc_tcc0_ccb_callback>
     372:	f0 91 6d 20 	lds	r31, 0x206D	; 0x80206d <tc_tcc0_ccb_callback+0x1>
     376:	30 97       	sbiw	r30, 0x00	; 0
     378:	09 f0       	breq	.+2      	; 0x37c <__vector_17+0x30>
		tc_tcc0_ccb_callback();
     37a:	09 95       	icall
	}
}
     37c:	ff 91       	pop	r31
     37e:	ef 91       	pop	r30
     380:	bf 91       	pop	r27
     382:	af 91       	pop	r26
     384:	9f 91       	pop	r25
     386:	8f 91       	pop	r24
     388:	7f 91       	pop	r23
     38a:	6f 91       	pop	r22
     38c:	5f 91       	pop	r21
     38e:	4f 91       	pop	r20
     390:	3f 91       	pop	r19
     392:	2f 91       	pop	r18
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     39e:	1f 92       	push	r1
     3a0:	0f 92       	push	r0
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	0f 92       	push	r0
     3a6:	11 24       	eor	r1, r1
     3a8:	2f 93       	push	r18
     3aa:	3f 93       	push	r19
     3ac:	4f 93       	push	r20
     3ae:	5f 93       	push	r21
     3b0:	6f 93       	push	r22
     3b2:	7f 93       	push	r23
     3b4:	8f 93       	push	r24
     3b6:	9f 93       	push	r25
     3b8:	af 93       	push	r26
     3ba:	bf 93       	push	r27
     3bc:	ef 93       	push	r30
     3be:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     3c0:	e0 91 6a 20 	lds	r30, 0x206A	; 0x80206a <tc_tcc0_ccc_callback>
     3c4:	f0 91 6b 20 	lds	r31, 0x206B	; 0x80206b <tc_tcc0_ccc_callback+0x1>
     3c8:	30 97       	sbiw	r30, 0x00	; 0
     3ca:	09 f0       	breq	.+2      	; 0x3ce <__vector_18+0x30>
		tc_tcc0_ccc_callback();
     3cc:	09 95       	icall
	}
}
     3ce:	ff 91       	pop	r31
     3d0:	ef 91       	pop	r30
     3d2:	bf 91       	pop	r27
     3d4:	af 91       	pop	r26
     3d6:	9f 91       	pop	r25
     3d8:	8f 91       	pop	r24
     3da:	7f 91       	pop	r23
     3dc:	6f 91       	pop	r22
     3de:	5f 91       	pop	r21
     3e0:	4f 91       	pop	r20
     3e2:	3f 91       	pop	r19
     3e4:	2f 91       	pop	r18
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	2f 93       	push	r18
     3fc:	3f 93       	push	r19
     3fe:	4f 93       	push	r20
     400:	5f 93       	push	r21
     402:	6f 93       	push	r22
     404:	7f 93       	push	r23
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
     40a:	af 93       	push	r26
     40c:	bf 93       	push	r27
     40e:	ef 93       	push	r30
     410:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     412:	e0 91 68 20 	lds	r30, 0x2068	; 0x802068 <tc_tcc0_ccd_callback>
     416:	f0 91 69 20 	lds	r31, 0x2069	; 0x802069 <tc_tcc0_ccd_callback+0x1>
     41a:	30 97       	sbiw	r30, 0x00	; 0
     41c:	09 f0       	breq	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		tc_tcc0_ccd_callback();
     41e:	09 95       	icall
	}
}
     420:	ff 91       	pop	r31
     422:	ef 91       	pop	r30
     424:	bf 91       	pop	r27
     426:	af 91       	pop	r26
     428:	9f 91       	pop	r25
     42a:	8f 91       	pop	r24
     42c:	7f 91       	pop	r23
     42e:	6f 91       	pop	r22
     430:	5f 91       	pop	r21
     432:	4f 91       	pop	r20
     434:	3f 91       	pop	r19
     436:	2f 91       	pop	r18
     438:	0f 90       	pop	r0
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	0f 90       	pop	r0
     43e:	1f 90       	pop	r1
     440:	18 95       	reti

00000442 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     442:	1f 92       	push	r1
     444:	0f 92       	push	r0
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	0f 92       	push	r0
     44a:	11 24       	eor	r1, r1
     44c:	2f 93       	push	r18
     44e:	3f 93       	push	r19
     450:	4f 93       	push	r20
     452:	5f 93       	push	r21
     454:	6f 93       	push	r22
     456:	7f 93       	push	r23
     458:	8f 93       	push	r24
     45a:	9f 93       	push	r25
     45c:	af 93       	push	r26
     45e:	bf 93       	push	r27
     460:	ef 93       	push	r30
     462:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     464:	e0 91 66 20 	lds	r30, 0x2066	; 0x802066 <tc_tcc1_ovf_callback>
     468:	f0 91 67 20 	lds	r31, 0x2067	; 0x802067 <tc_tcc1_ovf_callback+0x1>
     46c:	30 97       	sbiw	r30, 0x00	; 0
     46e:	09 f0       	breq	.+2      	; 0x472 <__vector_20+0x30>
		tc_tcc1_ovf_callback();
     470:	09 95       	icall
	}
}
     472:	ff 91       	pop	r31
     474:	ef 91       	pop	r30
     476:	bf 91       	pop	r27
     478:	af 91       	pop	r26
     47a:	9f 91       	pop	r25
     47c:	8f 91       	pop	r24
     47e:	7f 91       	pop	r23
     480:	6f 91       	pop	r22
     482:	5f 91       	pop	r21
     484:	4f 91       	pop	r20
     486:	3f 91       	pop	r19
     488:	2f 91       	pop	r18
     48a:	0f 90       	pop	r0
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	0f 90       	pop	r0
     490:	1f 90       	pop	r1
     492:	18 95       	reti

00000494 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     494:	1f 92       	push	r1
     496:	0f 92       	push	r0
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	0f 92       	push	r0
     49c:	11 24       	eor	r1, r1
     49e:	2f 93       	push	r18
     4a0:	3f 93       	push	r19
     4a2:	4f 93       	push	r20
     4a4:	5f 93       	push	r21
     4a6:	6f 93       	push	r22
     4a8:	7f 93       	push	r23
     4aa:	8f 93       	push	r24
     4ac:	9f 93       	push	r25
     4ae:	af 93       	push	r26
     4b0:	bf 93       	push	r27
     4b2:	ef 93       	push	r30
     4b4:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     4b6:	e0 91 64 20 	lds	r30, 0x2064	; 0x802064 <tc_tcc1_err_callback>
     4ba:	f0 91 65 20 	lds	r31, 0x2065	; 0x802065 <tc_tcc1_err_callback+0x1>
     4be:	30 97       	sbiw	r30, 0x00	; 0
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <__vector_21+0x30>
		tc_tcc1_err_callback();
     4c2:	09 95       	icall
	}
}
     4c4:	ff 91       	pop	r31
     4c6:	ef 91       	pop	r30
     4c8:	bf 91       	pop	r27
     4ca:	af 91       	pop	r26
     4cc:	9f 91       	pop	r25
     4ce:	8f 91       	pop	r24
     4d0:	7f 91       	pop	r23
     4d2:	6f 91       	pop	r22
     4d4:	5f 91       	pop	r21
     4d6:	4f 91       	pop	r20
     4d8:	3f 91       	pop	r19
     4da:	2f 91       	pop	r18
     4dc:	0f 90       	pop	r0
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	0f 90       	pop	r0
     4e2:	1f 90       	pop	r1
     4e4:	18 95       	reti

000004e6 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     4e6:	1f 92       	push	r1
     4e8:	0f 92       	push	r0
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	0f 92       	push	r0
     4ee:	11 24       	eor	r1, r1
     4f0:	2f 93       	push	r18
     4f2:	3f 93       	push	r19
     4f4:	4f 93       	push	r20
     4f6:	5f 93       	push	r21
     4f8:	6f 93       	push	r22
     4fa:	7f 93       	push	r23
     4fc:	8f 93       	push	r24
     4fe:	9f 93       	push	r25
     500:	af 93       	push	r26
     502:	bf 93       	push	r27
     504:	ef 93       	push	r30
     506:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     508:	e0 91 62 20 	lds	r30, 0x2062	; 0x802062 <tc_tcc1_cca_callback>
     50c:	f0 91 63 20 	lds	r31, 0x2063	; 0x802063 <tc_tcc1_cca_callback+0x1>
     510:	30 97       	sbiw	r30, 0x00	; 0
     512:	09 f0       	breq	.+2      	; 0x516 <__vector_22+0x30>
		tc_tcc1_cca_callback();
     514:	09 95       	icall
	}
}
     516:	ff 91       	pop	r31
     518:	ef 91       	pop	r30
     51a:	bf 91       	pop	r27
     51c:	af 91       	pop	r26
     51e:	9f 91       	pop	r25
     520:	8f 91       	pop	r24
     522:	7f 91       	pop	r23
     524:	6f 91       	pop	r22
     526:	5f 91       	pop	r21
     528:	4f 91       	pop	r20
     52a:	3f 91       	pop	r19
     52c:	2f 91       	pop	r18
     52e:	0f 90       	pop	r0
     530:	0f be       	out	0x3f, r0	; 63
     532:	0f 90       	pop	r0
     534:	1f 90       	pop	r1
     536:	18 95       	reti

00000538 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     538:	1f 92       	push	r1
     53a:	0f 92       	push	r0
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	0f 92       	push	r0
     540:	11 24       	eor	r1, r1
     542:	2f 93       	push	r18
     544:	3f 93       	push	r19
     546:	4f 93       	push	r20
     548:	5f 93       	push	r21
     54a:	6f 93       	push	r22
     54c:	7f 93       	push	r23
     54e:	8f 93       	push	r24
     550:	9f 93       	push	r25
     552:	af 93       	push	r26
     554:	bf 93       	push	r27
     556:	ef 93       	push	r30
     558:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     55a:	e0 91 60 20 	lds	r30, 0x2060	; 0x802060 <tc_tcc1_ccb_callback>
     55e:	f0 91 61 20 	lds	r31, 0x2061	; 0x802061 <tc_tcc1_ccb_callback+0x1>
     562:	30 97       	sbiw	r30, 0x00	; 0
     564:	09 f0       	breq	.+2      	; 0x568 <__vector_23+0x30>
		tc_tcc1_ccb_callback();
     566:	09 95       	icall
	}
}
     568:	ff 91       	pop	r31
     56a:	ef 91       	pop	r30
     56c:	bf 91       	pop	r27
     56e:	af 91       	pop	r26
     570:	9f 91       	pop	r25
     572:	8f 91       	pop	r24
     574:	7f 91       	pop	r23
     576:	6f 91       	pop	r22
     578:	5f 91       	pop	r21
     57a:	4f 91       	pop	r20
     57c:	3f 91       	pop	r19
     57e:	2f 91       	pop	r18
     580:	0f 90       	pop	r0
     582:	0f be       	out	0x3f, r0	; 63
     584:	0f 90       	pop	r0
     586:	1f 90       	pop	r1
     588:	18 95       	reti

0000058a <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     58a:	1f 92       	push	r1
     58c:	0f 92       	push	r0
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	0f 92       	push	r0
     592:	11 24       	eor	r1, r1
     594:	2f 93       	push	r18
     596:	3f 93       	push	r19
     598:	4f 93       	push	r20
     59a:	5f 93       	push	r21
     59c:	6f 93       	push	r22
     59e:	7f 93       	push	r23
     5a0:	8f 93       	push	r24
     5a2:	9f 93       	push	r25
     5a4:	af 93       	push	r26
     5a6:	bf 93       	push	r27
     5a8:	ef 93       	push	r30
     5aa:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     5ac:	e0 91 5e 20 	lds	r30, 0x205E	; 0x80205e <tc_tcd0_ovf_callback>
     5b0:	f0 91 5f 20 	lds	r31, 0x205F	; 0x80205f <tc_tcd0_ovf_callback+0x1>
     5b4:	30 97       	sbiw	r30, 0x00	; 0
     5b6:	09 f0       	breq	.+2      	; 0x5ba <__vector_77+0x30>
		tc_tcd0_ovf_callback();
     5b8:	09 95       	icall
	}
}
     5ba:	ff 91       	pop	r31
     5bc:	ef 91       	pop	r30
     5be:	bf 91       	pop	r27
     5c0:	af 91       	pop	r26
     5c2:	9f 91       	pop	r25
     5c4:	8f 91       	pop	r24
     5c6:	7f 91       	pop	r23
     5c8:	6f 91       	pop	r22
     5ca:	5f 91       	pop	r21
     5cc:	4f 91       	pop	r20
     5ce:	3f 91       	pop	r19
     5d0:	2f 91       	pop	r18
     5d2:	0f 90       	pop	r0
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	0f 90       	pop	r0
     5d8:	1f 90       	pop	r1
     5da:	18 95       	reti

000005dc <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     5dc:	1f 92       	push	r1
     5de:	0f 92       	push	r0
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	0f 92       	push	r0
     5e4:	11 24       	eor	r1, r1
     5e6:	2f 93       	push	r18
     5e8:	3f 93       	push	r19
     5ea:	4f 93       	push	r20
     5ec:	5f 93       	push	r21
     5ee:	6f 93       	push	r22
     5f0:	7f 93       	push	r23
     5f2:	8f 93       	push	r24
     5f4:	9f 93       	push	r25
     5f6:	af 93       	push	r26
     5f8:	bf 93       	push	r27
     5fa:	ef 93       	push	r30
     5fc:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     5fe:	e0 91 5c 20 	lds	r30, 0x205C	; 0x80205c <tc_tcd0_err_callback>
     602:	f0 91 5d 20 	lds	r31, 0x205D	; 0x80205d <tc_tcd0_err_callback+0x1>
     606:	30 97       	sbiw	r30, 0x00	; 0
     608:	09 f0       	breq	.+2      	; 0x60c <__vector_78+0x30>
		tc_tcd0_err_callback();
     60a:	09 95       	icall
	}
}
     60c:	ff 91       	pop	r31
     60e:	ef 91       	pop	r30
     610:	bf 91       	pop	r27
     612:	af 91       	pop	r26
     614:	9f 91       	pop	r25
     616:	8f 91       	pop	r24
     618:	7f 91       	pop	r23
     61a:	6f 91       	pop	r22
     61c:	5f 91       	pop	r21
     61e:	4f 91       	pop	r20
     620:	3f 91       	pop	r19
     622:	2f 91       	pop	r18
     624:	0f 90       	pop	r0
     626:	0f be       	out	0x3f, r0	; 63
     628:	0f 90       	pop	r0
     62a:	1f 90       	pop	r1
     62c:	18 95       	reti

0000062e <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     62e:	1f 92       	push	r1
     630:	0f 92       	push	r0
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	0f 92       	push	r0
     636:	11 24       	eor	r1, r1
     638:	2f 93       	push	r18
     63a:	3f 93       	push	r19
     63c:	4f 93       	push	r20
     63e:	5f 93       	push	r21
     640:	6f 93       	push	r22
     642:	7f 93       	push	r23
     644:	8f 93       	push	r24
     646:	9f 93       	push	r25
     648:	af 93       	push	r26
     64a:	bf 93       	push	r27
     64c:	ef 93       	push	r30
     64e:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     650:	e0 91 5a 20 	lds	r30, 0x205A	; 0x80205a <tc_tcd0_cca_callback>
     654:	f0 91 5b 20 	lds	r31, 0x205B	; 0x80205b <tc_tcd0_cca_callback+0x1>
     658:	30 97       	sbiw	r30, 0x00	; 0
     65a:	09 f0       	breq	.+2      	; 0x65e <__vector_79+0x30>
		tc_tcd0_cca_callback();
     65c:	09 95       	icall
	}
}
     65e:	ff 91       	pop	r31
     660:	ef 91       	pop	r30
     662:	bf 91       	pop	r27
     664:	af 91       	pop	r26
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	7f 91       	pop	r23
     66c:	6f 91       	pop	r22
     66e:	5f 91       	pop	r21
     670:	4f 91       	pop	r20
     672:	3f 91       	pop	r19
     674:	2f 91       	pop	r18
     676:	0f 90       	pop	r0
     678:	0f be       	out	0x3f, r0	; 63
     67a:	0f 90       	pop	r0
     67c:	1f 90       	pop	r1
     67e:	18 95       	reti

00000680 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     680:	1f 92       	push	r1
     682:	0f 92       	push	r0
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	0f 92       	push	r0
     688:	11 24       	eor	r1, r1
     68a:	2f 93       	push	r18
     68c:	3f 93       	push	r19
     68e:	4f 93       	push	r20
     690:	5f 93       	push	r21
     692:	6f 93       	push	r22
     694:	7f 93       	push	r23
     696:	8f 93       	push	r24
     698:	9f 93       	push	r25
     69a:	af 93       	push	r26
     69c:	bf 93       	push	r27
     69e:	ef 93       	push	r30
     6a0:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     6a2:	e0 91 58 20 	lds	r30, 0x2058	; 0x802058 <tc_tcd0_ccb_callback>
     6a6:	f0 91 59 20 	lds	r31, 0x2059	; 0x802059 <tc_tcd0_ccb_callback+0x1>
     6aa:	30 97       	sbiw	r30, 0x00	; 0
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <__vector_80+0x30>
		tc_tcd0_ccb_callback();
     6ae:	09 95       	icall
	}
}
     6b0:	ff 91       	pop	r31
     6b2:	ef 91       	pop	r30
     6b4:	bf 91       	pop	r27
     6b6:	af 91       	pop	r26
     6b8:	9f 91       	pop	r25
     6ba:	8f 91       	pop	r24
     6bc:	7f 91       	pop	r23
     6be:	6f 91       	pop	r22
     6c0:	5f 91       	pop	r21
     6c2:	4f 91       	pop	r20
     6c4:	3f 91       	pop	r19
     6c6:	2f 91       	pop	r18
     6c8:	0f 90       	pop	r0
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	0f 90       	pop	r0
     6ce:	1f 90       	pop	r1
     6d0:	18 95       	reti

000006d2 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     6d2:	1f 92       	push	r1
     6d4:	0f 92       	push	r0
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	0f 92       	push	r0
     6da:	11 24       	eor	r1, r1
     6dc:	2f 93       	push	r18
     6de:	3f 93       	push	r19
     6e0:	4f 93       	push	r20
     6e2:	5f 93       	push	r21
     6e4:	6f 93       	push	r22
     6e6:	7f 93       	push	r23
     6e8:	8f 93       	push	r24
     6ea:	9f 93       	push	r25
     6ec:	af 93       	push	r26
     6ee:	bf 93       	push	r27
     6f0:	ef 93       	push	r30
     6f2:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     6f4:	e0 91 56 20 	lds	r30, 0x2056	; 0x802056 <tc_tcd0_ccc_callback>
     6f8:	f0 91 57 20 	lds	r31, 0x2057	; 0x802057 <tc_tcd0_ccc_callback+0x1>
     6fc:	30 97       	sbiw	r30, 0x00	; 0
     6fe:	09 f0       	breq	.+2      	; 0x702 <__vector_81+0x30>
		tc_tcd0_ccc_callback();
     700:	09 95       	icall
	}
}
     702:	ff 91       	pop	r31
     704:	ef 91       	pop	r30
     706:	bf 91       	pop	r27
     708:	af 91       	pop	r26
     70a:	9f 91       	pop	r25
     70c:	8f 91       	pop	r24
     70e:	7f 91       	pop	r23
     710:	6f 91       	pop	r22
     712:	5f 91       	pop	r21
     714:	4f 91       	pop	r20
     716:	3f 91       	pop	r19
     718:	2f 91       	pop	r18
     71a:	0f 90       	pop	r0
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     724:	1f 92       	push	r1
     726:	0f 92       	push	r0
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	0f 92       	push	r0
     72c:	11 24       	eor	r1, r1
     72e:	2f 93       	push	r18
     730:	3f 93       	push	r19
     732:	4f 93       	push	r20
     734:	5f 93       	push	r21
     736:	6f 93       	push	r22
     738:	7f 93       	push	r23
     73a:	8f 93       	push	r24
     73c:	9f 93       	push	r25
     73e:	af 93       	push	r26
     740:	bf 93       	push	r27
     742:	ef 93       	push	r30
     744:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     746:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <tc_tcd0_ccd_callback>
     74a:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <tc_tcd0_ccd_callback+0x1>
     74e:	30 97       	sbiw	r30, 0x00	; 0
     750:	09 f0       	breq	.+2      	; 0x754 <__vector_82+0x30>
		tc_tcd0_ccd_callback();
     752:	09 95       	icall
	}
}
     754:	ff 91       	pop	r31
     756:	ef 91       	pop	r30
     758:	bf 91       	pop	r27
     75a:	af 91       	pop	r26
     75c:	9f 91       	pop	r25
     75e:	8f 91       	pop	r24
     760:	7f 91       	pop	r23
     762:	6f 91       	pop	r22
     764:	5f 91       	pop	r21
     766:	4f 91       	pop	r20
     768:	3f 91       	pop	r19
     76a:	2f 91       	pop	r18
     76c:	0f 90       	pop	r0
     76e:	0f be       	out	0x3f, r0	; 63
     770:	0f 90       	pop	r0
     772:	1f 90       	pop	r1
     774:	18 95       	reti

00000776 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     776:	1f 92       	push	r1
     778:	0f 92       	push	r0
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	0f 92       	push	r0
     77e:	11 24       	eor	r1, r1
     780:	2f 93       	push	r18
     782:	3f 93       	push	r19
     784:	4f 93       	push	r20
     786:	5f 93       	push	r21
     788:	6f 93       	push	r22
     78a:	7f 93       	push	r23
     78c:	8f 93       	push	r24
     78e:	9f 93       	push	r25
     790:	af 93       	push	r26
     792:	bf 93       	push	r27
     794:	ef 93       	push	r30
     796:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     798:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <tc_tcd1_ovf_callback>
     79c:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <tc_tcd1_ovf_callback+0x1>
     7a0:	30 97       	sbiw	r30, 0x00	; 0
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <__vector_83+0x30>
		tc_tcd1_ovf_callback();
     7a4:	09 95       	icall
	}
}
     7a6:	ff 91       	pop	r31
     7a8:	ef 91       	pop	r30
     7aa:	bf 91       	pop	r27
     7ac:	af 91       	pop	r26
     7ae:	9f 91       	pop	r25
     7b0:	8f 91       	pop	r24
     7b2:	7f 91       	pop	r23
     7b4:	6f 91       	pop	r22
     7b6:	5f 91       	pop	r21
     7b8:	4f 91       	pop	r20
     7ba:	3f 91       	pop	r19
     7bc:	2f 91       	pop	r18
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     7c8:	1f 92       	push	r1
     7ca:	0f 92       	push	r0
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	0f 92       	push	r0
     7d0:	11 24       	eor	r1, r1
     7d2:	2f 93       	push	r18
     7d4:	3f 93       	push	r19
     7d6:	4f 93       	push	r20
     7d8:	5f 93       	push	r21
     7da:	6f 93       	push	r22
     7dc:	7f 93       	push	r23
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	af 93       	push	r26
     7e4:	bf 93       	push	r27
     7e6:	ef 93       	push	r30
     7e8:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     7ea:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <tc_tcd1_err_callback>
     7ee:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <tc_tcd1_err_callback+0x1>
     7f2:	30 97       	sbiw	r30, 0x00	; 0
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <__vector_84+0x30>
		tc_tcd1_err_callback();
     7f6:	09 95       	icall
	}
}
     7f8:	ff 91       	pop	r31
     7fa:	ef 91       	pop	r30
     7fc:	bf 91       	pop	r27
     7fe:	af 91       	pop	r26
     800:	9f 91       	pop	r25
     802:	8f 91       	pop	r24
     804:	7f 91       	pop	r23
     806:	6f 91       	pop	r22
     808:	5f 91       	pop	r21
     80a:	4f 91       	pop	r20
     80c:	3f 91       	pop	r19
     80e:	2f 91       	pop	r18
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0
     816:	1f 90       	pop	r1
     818:	18 95       	reti

0000081a <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     81a:	1f 92       	push	r1
     81c:	0f 92       	push	r0
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	0f 92       	push	r0
     822:	11 24       	eor	r1, r1
     824:	2f 93       	push	r18
     826:	3f 93       	push	r19
     828:	4f 93       	push	r20
     82a:	5f 93       	push	r21
     82c:	6f 93       	push	r22
     82e:	7f 93       	push	r23
     830:	8f 93       	push	r24
     832:	9f 93       	push	r25
     834:	af 93       	push	r26
     836:	bf 93       	push	r27
     838:	ef 93       	push	r30
     83a:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     83c:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <tc_tcd1_cca_callback>
     840:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <tc_tcd1_cca_callback+0x1>
     844:	30 97       	sbiw	r30, 0x00	; 0
     846:	09 f0       	breq	.+2      	; 0x84a <__vector_85+0x30>
		tc_tcd1_cca_callback();
     848:	09 95       	icall
	}
}
     84a:	ff 91       	pop	r31
     84c:	ef 91       	pop	r30
     84e:	bf 91       	pop	r27
     850:	af 91       	pop	r26
     852:	9f 91       	pop	r25
     854:	8f 91       	pop	r24
     856:	7f 91       	pop	r23
     858:	6f 91       	pop	r22
     85a:	5f 91       	pop	r21
     85c:	4f 91       	pop	r20
     85e:	3f 91       	pop	r19
     860:	2f 91       	pop	r18
     862:	0f 90       	pop	r0
     864:	0f be       	out	0x3f, r0	; 63
     866:	0f 90       	pop	r0
     868:	1f 90       	pop	r1
     86a:	18 95       	reti

0000086c <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	2f 93       	push	r18
     878:	3f 93       	push	r19
     87a:	4f 93       	push	r20
     87c:	5f 93       	push	r21
     87e:	6f 93       	push	r22
     880:	7f 93       	push	r23
     882:	8f 93       	push	r24
     884:	9f 93       	push	r25
     886:	af 93       	push	r26
     888:	bf 93       	push	r27
     88a:	ef 93       	push	r30
     88c:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     88e:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <tc_tcd1_ccb_callback>
     892:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <tc_tcd1_ccb_callback+0x1>
     896:	30 97       	sbiw	r30, 0x00	; 0
     898:	09 f0       	breq	.+2      	; 0x89c <__vector_86+0x30>
		tc_tcd1_ccb_callback();
     89a:	09 95       	icall
	}
}
     89c:	ff 91       	pop	r31
     89e:	ef 91       	pop	r30
     8a0:	bf 91       	pop	r27
     8a2:	af 91       	pop	r26
     8a4:	9f 91       	pop	r25
     8a6:	8f 91       	pop	r24
     8a8:	7f 91       	pop	r23
     8aa:	6f 91       	pop	r22
     8ac:	5f 91       	pop	r21
     8ae:	4f 91       	pop	r20
     8b0:	3f 91       	pop	r19
     8b2:	2f 91       	pop	r18
     8b4:	0f 90       	pop	r0
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	0f 90       	pop	r0
     8ba:	1f 90       	pop	r1
     8bc:	18 95       	reti

000008be <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     8be:	1f 92       	push	r1
     8c0:	0f 92       	push	r0
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	0f 92       	push	r0
     8c6:	11 24       	eor	r1, r1
     8c8:	2f 93       	push	r18
     8ca:	3f 93       	push	r19
     8cc:	4f 93       	push	r20
     8ce:	5f 93       	push	r21
     8d0:	6f 93       	push	r22
     8d2:	7f 93       	push	r23
     8d4:	8f 93       	push	r24
     8d6:	9f 93       	push	r25
     8d8:	af 93       	push	r26
     8da:	bf 93       	push	r27
     8dc:	ef 93       	push	r30
     8de:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     8e0:	e0 91 4a 20 	lds	r30, 0x204A	; 0x80204a <tc_tce0_ovf_callback>
     8e4:	f0 91 4b 20 	lds	r31, 0x204B	; 0x80204b <tc_tce0_ovf_callback+0x1>
     8e8:	30 97       	sbiw	r30, 0x00	; 0
     8ea:	09 f0       	breq	.+2      	; 0x8ee <__vector_47+0x30>
		tc_tce0_ovf_callback();
     8ec:	09 95       	icall
	}
}
     8ee:	ff 91       	pop	r31
     8f0:	ef 91       	pop	r30
     8f2:	bf 91       	pop	r27
     8f4:	af 91       	pop	r26
     8f6:	9f 91       	pop	r25
     8f8:	8f 91       	pop	r24
     8fa:	7f 91       	pop	r23
     8fc:	6f 91       	pop	r22
     8fe:	5f 91       	pop	r21
     900:	4f 91       	pop	r20
     902:	3f 91       	pop	r19
     904:	2f 91       	pop	r18
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	1f 90       	pop	r1
     90e:	18 95       	reti

00000910 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     932:	e0 91 48 20 	lds	r30, 0x2048	; 0x802048 <tc_tce0_err_callback>
     936:	f0 91 49 20 	lds	r31, 0x2049	; 0x802049 <tc_tce0_err_callback+0x1>
     93a:	30 97       	sbiw	r30, 0x00	; 0
     93c:	09 f0       	breq	.+2      	; 0x940 <__vector_48+0x30>
		tc_tce0_err_callback();
     93e:	09 95       	icall
	}
}
     940:	ff 91       	pop	r31
     942:	ef 91       	pop	r30
     944:	bf 91       	pop	r27
     946:	af 91       	pop	r26
     948:	9f 91       	pop	r25
     94a:	8f 91       	pop	r24
     94c:	7f 91       	pop	r23
     94e:	6f 91       	pop	r22
     950:	5f 91       	pop	r21
     952:	4f 91       	pop	r20
     954:	3f 91       	pop	r19
     956:	2f 91       	pop	r18
     958:	0f 90       	pop	r0
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	0f 90       	pop	r0
     95e:	1f 90       	pop	r1
     960:	18 95       	reti

00000962 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     962:	1f 92       	push	r1
     964:	0f 92       	push	r0
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	0f 92       	push	r0
     96a:	11 24       	eor	r1, r1
     96c:	2f 93       	push	r18
     96e:	3f 93       	push	r19
     970:	4f 93       	push	r20
     972:	5f 93       	push	r21
     974:	6f 93       	push	r22
     976:	7f 93       	push	r23
     978:	8f 93       	push	r24
     97a:	9f 93       	push	r25
     97c:	af 93       	push	r26
     97e:	bf 93       	push	r27
     980:	ef 93       	push	r30
     982:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     984:	e0 91 46 20 	lds	r30, 0x2046	; 0x802046 <tc_tce0_cca_callback>
     988:	f0 91 47 20 	lds	r31, 0x2047	; 0x802047 <tc_tce0_cca_callback+0x1>
     98c:	30 97       	sbiw	r30, 0x00	; 0
     98e:	09 f0       	breq	.+2      	; 0x992 <__vector_49+0x30>
		tc_tce0_cca_callback();
     990:	09 95       	icall
	}
}
     992:	ff 91       	pop	r31
     994:	ef 91       	pop	r30
     996:	bf 91       	pop	r27
     998:	af 91       	pop	r26
     99a:	9f 91       	pop	r25
     99c:	8f 91       	pop	r24
     99e:	7f 91       	pop	r23
     9a0:	6f 91       	pop	r22
     9a2:	5f 91       	pop	r21
     9a4:	4f 91       	pop	r20
     9a6:	3f 91       	pop	r19
     9a8:	2f 91       	pop	r18
     9aa:	0f 90       	pop	r0
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	0f 90       	pop	r0
     9b0:	1f 90       	pop	r1
     9b2:	18 95       	reti

000009b4 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     9b4:	1f 92       	push	r1
     9b6:	0f 92       	push	r0
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	0f 92       	push	r0
     9bc:	11 24       	eor	r1, r1
     9be:	2f 93       	push	r18
     9c0:	3f 93       	push	r19
     9c2:	4f 93       	push	r20
     9c4:	5f 93       	push	r21
     9c6:	6f 93       	push	r22
     9c8:	7f 93       	push	r23
     9ca:	8f 93       	push	r24
     9cc:	9f 93       	push	r25
     9ce:	af 93       	push	r26
     9d0:	bf 93       	push	r27
     9d2:	ef 93       	push	r30
     9d4:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     9d6:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <tc_tce0_ccb_callback>
     9da:	f0 91 45 20 	lds	r31, 0x2045	; 0x802045 <tc_tce0_ccb_callback+0x1>
     9de:	30 97       	sbiw	r30, 0x00	; 0
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <__vector_50+0x30>
		tc_tce0_ccb_callback();
     9e2:	09 95       	icall
	}
}
     9e4:	ff 91       	pop	r31
     9e6:	ef 91       	pop	r30
     9e8:	bf 91       	pop	r27
     9ea:	af 91       	pop	r26
     9ec:	9f 91       	pop	r25
     9ee:	8f 91       	pop	r24
     9f0:	7f 91       	pop	r23
     9f2:	6f 91       	pop	r22
     9f4:	5f 91       	pop	r21
     9f6:	4f 91       	pop	r20
     9f8:	3f 91       	pop	r19
     9fa:	2f 91       	pop	r18
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	0f 90       	pop	r0
     a02:	1f 90       	pop	r1
     a04:	18 95       	reti

00000a06 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     a06:	1f 92       	push	r1
     a08:	0f 92       	push	r0
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	0f 92       	push	r0
     a0e:	11 24       	eor	r1, r1
     a10:	2f 93       	push	r18
     a12:	3f 93       	push	r19
     a14:	4f 93       	push	r20
     a16:	5f 93       	push	r21
     a18:	6f 93       	push	r22
     a1a:	7f 93       	push	r23
     a1c:	8f 93       	push	r24
     a1e:	9f 93       	push	r25
     a20:	af 93       	push	r26
     a22:	bf 93       	push	r27
     a24:	ef 93       	push	r30
     a26:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     a28:	e0 91 42 20 	lds	r30, 0x2042	; 0x802042 <tc_tce0_ccc_callback>
     a2c:	f0 91 43 20 	lds	r31, 0x2043	; 0x802043 <tc_tce0_ccc_callback+0x1>
     a30:	30 97       	sbiw	r30, 0x00	; 0
     a32:	09 f0       	breq	.+2      	; 0xa36 <__vector_51+0x30>
		tc_tce0_ccc_callback();
     a34:	09 95       	icall
	}
}
     a36:	ff 91       	pop	r31
     a38:	ef 91       	pop	r30
     a3a:	bf 91       	pop	r27
     a3c:	af 91       	pop	r26
     a3e:	9f 91       	pop	r25
     a40:	8f 91       	pop	r24
     a42:	7f 91       	pop	r23
     a44:	6f 91       	pop	r22
     a46:	5f 91       	pop	r21
     a48:	4f 91       	pop	r20
     a4a:	3f 91       	pop	r19
     a4c:	2f 91       	pop	r18
     a4e:	0f 90       	pop	r0
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	0f 90       	pop	r0
     a54:	1f 90       	pop	r1
     a56:	18 95       	reti

00000a58 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     a58:	1f 92       	push	r1
     a5a:	0f 92       	push	r0
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	0f 92       	push	r0
     a60:	11 24       	eor	r1, r1
     a62:	2f 93       	push	r18
     a64:	3f 93       	push	r19
     a66:	4f 93       	push	r20
     a68:	5f 93       	push	r21
     a6a:	6f 93       	push	r22
     a6c:	7f 93       	push	r23
     a6e:	8f 93       	push	r24
     a70:	9f 93       	push	r25
     a72:	af 93       	push	r26
     a74:	bf 93       	push	r27
     a76:	ef 93       	push	r30
     a78:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     a7a:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <__data_end>
     a7e:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <__data_end+0x1>
     a82:	30 97       	sbiw	r30, 0x00	; 0
     a84:	09 f0       	breq	.+2      	; 0xa88 <__vector_52+0x30>
		tc_tce0_ccd_callback();
     a86:	09 95       	icall
	}
}
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	bf 91       	pop	r27
     a8e:	af 91       	pop	r26
     a90:	9f 91       	pop	r25
     a92:	8f 91       	pop	r24
     a94:	7f 91       	pop	r23
     a96:	6f 91       	pop	r22
     a98:	5f 91       	pop	r21
     a9a:	4f 91       	pop	r20
     a9c:	3f 91       	pop	r19
     a9e:	2f 91       	pop	r18
     aa0:	0f 90       	pop	r0
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	0f 90       	pop	r0
     aa6:	1f 90       	pop	r1
     aa8:	18 95       	reti

00000aaa <__portable_avr_delay_cycles>:
	 * with 40 positions for 20 hard ("clic") positions */
	qdec_config_revolution(config, 40);
	qdec_config_enable_freq(config, 1);
	/* QDec enable */
	qdec_enabled(config);
}
     aaa:	04 c0       	rjmp	.+8      	; 0xab4 <__portable_avr_delay_cycles+0xa>
     aac:	61 50       	subi	r22, 0x01	; 1
     aae:	71 09       	sbc	r23, r1
     ab0:	81 09       	sbc	r24, r1
     ab2:	91 09       	sbc	r25, r1
     ab4:	61 15       	cp	r22, r1
     ab6:	71 05       	cpc	r23, r1
     ab8:	81 05       	cpc	r24, r1
     aba:	91 05       	cpc	r25, r1
     abc:	b9 f7       	brne	.-18     	; 0xaac <__portable_avr_delay_cycles+0x2>
     abe:	08 95       	ret

00000ac0 <initLed>:

void initLed(void)
{
	PORTA.DIR |= (1 << 7);
     ac0:	e0 e0       	ldi	r30, 0x00	; 0
     ac2:	f6 e0       	ldi	r31, 0x06	; 6
     ac4:	80 81       	ld	r24, Z
     ac6:	80 68       	ori	r24, 0x80	; 128
     ac8:	80 83       	st	Z, r24
	PORTA.OUT &= (0 << 7);	
     aca:	84 81       	ldd	r24, Z+4	; 0x04
     acc:	14 82       	std	Z+4, r1	; 0x04
     ace:	08 95       	ret

00000ad0 <initUart>:
		-> 19200 Baud @ 2 MHz with CLK2X = 0, BSCALE = -5
		-> Rx InterruptW
		-> Use Rx and Tx
		-> 8N1
	*/
	USARTE0.BAUDCTRLA = 0xB0 & 0xFF;
     ad0:	e0 ea       	ldi	r30, 0xA0	; 160
     ad2:	fa e0       	ldi	r31, 0x0A	; 10
     ad4:	80 eb       	ldi	r24, 0xB0	; 176
     ad6:	86 83       	std	Z+6, r24	; 0x06
	USARTE0.BAUDCTRLB = ((0xB0 & 0xF00) >> 0x08);
     ad8:	17 82       	std	Z+7, r1	; 0x07
	USARTE0.BAUDCTRLB |= ((-5 & 0x0F) << 0x04);
     ada:	87 81       	ldd	r24, Z+7	; 0x07
     adc:	80 6b       	ori	r24, 0xB0	; 176
     ade:	87 83       	std	Z+7, r24	; 0x07
	USARTE0.CTRLA = USART_RXCINTLVL_LO_gc;
     ae0:	80 e1       	ldi	r24, 0x10	; 16
     ae2:	83 83       	std	Z+3, r24	; 0x03
	USARTE0.STATUS |= USART_RXCIF_bm;
     ae4:	81 81       	ldd	r24, Z+1	; 0x01
     ae6:	80 68       	ori	r24, 0x80	; 128
     ae8:	81 83       	std	Z+1, r24	; 0x01
	USARTE0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
     aea:	88 e1       	ldi	r24, 0x18	; 24
     aec:	84 83       	std	Z+4, r24	; 0x04
	USARTE0.CTRLC = USART_CHSIZE_8BIT_gc;
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	85 83       	std	Z+5, r24	; 0x05
	USARTE0.CTRLC &= ~(USART_PMODE0_bm | USART_PMODE1_bm | USART_SBMODE_bm);
     af2:	85 81       	ldd	r24, Z+5	; 0x05
     af4:	87 7c       	andi	r24, 0xC7	; 199
     af6:	85 83       	std	Z+5, r24	; 0x05
	PORTE.DIR = 0x08;
     af8:	88 e0       	ldi	r24, 0x08	; 8
     afa:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
	
	while(!(USARTE0.STATUS & USART_DREIF_bm));
     afe:	81 81       	ldd	r24, Z+1	; 0x01
     b00:	85 ff       	sbrs	r24, 5
     b02:	fd cf       	rjmp	.-6      	; 0xafe <initUart+0x2e>
	
	PMIC.CTRL = PMIC_LOLVLEN_bm;
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
     b0a:	78 94       	sei
     b0c:	08 95       	ret

00000b0e <main>:
	PORTA.OUT &= (0 << 7);
}

int main (void)
{
	initLed();
     b0e:	d8 df       	rcall	.-80     	; 0xac0 <initLed>
	initUart();
     b10:	df df       	rcall	.-66     	; 0xad0 <initUart>
     b12:	ff cf       	rjmp	.-2      	; 0xb12 <main+0x4>

00000b14 <sendMsg>:
     b14:	fc 01       	movw	r30, r24
	sei();
}

void sendMsg(char* data)
{
	while(*data)
     b16:	20 81       	ld	r18, Z
     b18:	22 23       	and	r18, r18
     b1a:	59 f0       	breq	.+22     	; 0xb32 <sendMsg+0x1e>
     b1c:	dc 01       	movw	r26, r24
     b1e:	11 96       	adiw	r26, 0x01	; 1
	{
		while(!(USARTE0.STATUS & USART_DREIF_bm));
     b20:	e0 ea       	ldi	r30, 0xA0	; 160
     b22:	fa e0       	ldi	r31, 0x0A	; 10
     b24:	91 81       	ldd	r25, Z+1	; 0x01
     b26:	95 ff       	sbrs	r25, 5
     b28:	fd cf       	rjmp	.-6      	; 0xb24 <sendMsg+0x10>
		USARTE0.DATA = *data++;
     b2a:	20 83       	st	Z, r18
	sei();
}

void sendMsg(char* data)
{
	while(*data)
     b2c:	2d 91       	ld	r18, X+
     b2e:	21 11       	cpse	r18, r1
     b30:	f9 cf       	rjmp	.-14     	; 0xb24 <sendMsg+0x10>
     b32:	08 95       	ret

00000b34 <__vector_58>:
	.freq_opt.unit = 1000,
	.revolution = 4
};

ISR(USARTE0_RXC_vect)
{
     b34:	1f 92       	push	r1
     b36:	0f 92       	push	r0
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	0f 92       	push	r0
     b3c:	11 24       	eor	r1, r1
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	2f 93       	push	r18
     b44:	3f 93       	push	r19
     b46:	4f 93       	push	r20
     b48:	5f 93       	push	r21
     b4a:	6f 93       	push	r22
     b4c:	7f 93       	push	r23
     b4e:	8f 93       	push	r24
     b50:	9f 93       	push	r25
     b52:	af 93       	push	r26
     b54:	bf 93       	push	r27
     b56:	ef 93       	push	r30
     b58:	ff 93       	push	r31
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	c8 5c       	subi	r28, 0xC8	; 200
     b64:	d1 09       	sbc	r29, r1
     b66:	cd bf       	out	0x3d, r28	; 61
     b68:	de bf       	out	0x3e, r29	; 62
	PORTA.OUT |= (1 << 7);
     b6a:	e0 e0       	ldi	r30, 0x00	; 0
     b6c:	f6 e0       	ldi	r31, 0x06	; 6
     b6e:	84 81       	ldd	r24, Z+4	; 0x04
     b70:	80 68       	ori	r24, 0x80	; 128
     b72:	84 83       	std	Z+4, r24	; 0x04
	uint8_t data = USARTE0.DATA;
     b74:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
	if (data == 'r')
     b78:	82 37       	cpi	r24, 0x72	; 114
     b7a:	e9 f4       	brne	.+58     	; 0xbb6 <__vector_58+0x82>
	{
		uint16_t qdec_position = qdec_get_position(&config_proximal) / 2;
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e2       	ldi	r25, 0x20	; 32
     b80:	59 db       	rcall	.-2382   	; 0x234 <qdec_get_position>
     b82:	8c 01       	movw	r16, r24
		bool dir = qdec_get_direction(&config_proximal);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e2       	ldi	r25, 0x20	; 32
     b88:	5d db       	rcall	.-2374   	; 0x244 <qdec_get_direction>
		char msg[200];
		sprintf(msg, "ProxPos: %d, ProxDir: %d\n", qdec_position, dir);
     b8a:	1f 92       	push	r1
     b8c:	8f 93       	push	r24
     b8e:	c8 01       	movw	r24, r16
     b90:	96 95       	lsr	r25
     b92:	87 95       	ror	r24
     b94:	9f 93       	push	r25
     b96:	8f 93       	push	r24
     b98:	8d e1       	ldi	r24, 0x1D	; 29
     b9a:	90 e2       	ldi	r25, 0x20	; 32
     b9c:	9f 93       	push	r25
     b9e:	8f 93       	push	r24
     ba0:	8e 01       	movw	r16, r28
     ba2:	0f 5f       	subi	r16, 0xFF	; 255
     ba4:	1f 4f       	sbci	r17, 0xFF	; 255
     ba6:	1f 93       	push	r17
     ba8:	0f 93       	push	r16
		sendMsg(msg);
     baa:	2a d0       	rcall	.+84     	; 0xc00 <sprintf>
     bac:	c8 01       	movw	r24, r16
     bae:	b2 df       	rcall	.-156    	; 0xb14 <sendMsg>
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	de bf       	out	0x3e, r29	; 62
	}
	else
	{
		sendMsg("online\n");
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__vector_58+0x88>
     bb6:	87 e3       	ldi	r24, 0x37	; 55
     bb8:	90 e2       	ldi	r25, 0x20	; 32
	}
	//printf(" %5umHz\r\n", qdec_get_frequency(&config_proximal));
	delay_ms(250);
     bba:	ac df       	rcall	.-168    	; 0xb14 <sendMsg>
     bbc:	66 e8       	ldi	r22, 0x86	; 134
     bbe:	75 e4       	ldi	r23, 0x45	; 69
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	72 df       	rcall	.-284    	; 0xaaa <__portable_avr_delay_cycles>
	PORTA.OUT &= (0 << 7);
     bc6:	e0 e0       	ldi	r30, 0x00	; 0
     bc8:	f6 e0       	ldi	r31, 0x06	; 6
     bca:	84 81       	ldd	r24, Z+4	; 0x04
     bcc:	14 82       	std	Z+4, r1	; 0x04
}
     bce:	c8 53       	subi	r28, 0x38	; 56
     bd0:	df 4f       	sbci	r29, 0xFF	; 255
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	ff 91       	pop	r31
     bdc:	ef 91       	pop	r30
     bde:	bf 91       	pop	r27
     be0:	af 91       	pop	r26
     be2:	9f 91       	pop	r25
     be4:	8f 91       	pop	r24
     be6:	7f 91       	pop	r23
     be8:	6f 91       	pop	r22
     bea:	5f 91       	pop	r21
     bec:	4f 91       	pop	r20
     bee:	3f 91       	pop	r19
     bf0:	2f 91       	pop	r18
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	0f 90       	pop	r0
     bfc:	1f 90       	pop	r1
     bfe:	18 95       	reti

00000c00 <sprintf>:
     c00:	ae e0       	ldi	r26, 0x0E	; 14
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e5 e0       	ldi	r30, 0x05	; 5
     c06:	f6 e0       	ldi	r31, 0x06	; 6
     c08:	aa c2       	rjmp	.+1364   	; 0x115e <__prologue_saves__+0x1c>
     c0a:	0d 89       	ldd	r16, Y+21	; 0x15
     c0c:	1e 89       	ldd	r17, Y+22	; 0x16
     c0e:	86 e0       	ldi	r24, 0x06	; 6
     c10:	8c 83       	std	Y+4, r24	; 0x04
     c12:	09 83       	std	Y+1, r16	; 0x01
     c14:	1a 83       	std	Y+2, r17	; 0x02
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	9f e7       	ldi	r25, 0x7F	; 127
     c1a:	8d 83       	std	Y+5, r24	; 0x05
     c1c:	9e 83       	std	Y+6, r25	; 0x06
     c1e:	ae 01       	movw	r20, r28
     c20:	47 5e       	subi	r20, 0xE7	; 231
     c22:	5f 4f       	sbci	r21, 0xFF	; 255
     c24:	6f 89       	ldd	r22, Y+23	; 0x17
     c26:	78 8d       	ldd	r23, Y+24	; 0x18
     c28:	ce 01       	movw	r24, r28
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	08 d0       	rcall	.+16     	; 0xc3e <vfprintf>
     c2e:	ef 81       	ldd	r30, Y+7	; 0x07
     c30:	f8 85       	ldd	r31, Y+8	; 0x08
     c32:	e0 0f       	add	r30, r16
     c34:	f1 1f       	adc	r31, r17
     c36:	10 82       	st	Z, r1
     c38:	2e 96       	adiw	r28, 0x0e	; 14
     c3a:	e4 e0       	ldi	r30, 0x04	; 4
     c3c:	a9 c2       	rjmp	.+1362   	; 0x1190 <__epilogue_restores__+0x1c>

00000c3e <vfprintf>:
     c3e:	ab e0       	ldi	r26, 0x0B	; 11
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e4 e2       	ldi	r30, 0x24	; 36
     c44:	f6 e0       	ldi	r31, 0x06	; 6
     c46:	7d c2       	rjmp	.+1274   	; 0x1142 <__prologue_saves__>
     c48:	6c 01       	movw	r12, r24
     c4a:	7b 01       	movw	r14, r22
     c4c:	8a 01       	movw	r16, r20
     c4e:	fc 01       	movw	r30, r24
     c50:	16 82       	std	Z+6, r1	; 0x06
     c52:	17 82       	std	Z+7, r1	; 0x07
     c54:	83 81       	ldd	r24, Z+3	; 0x03
     c56:	81 ff       	sbrs	r24, 1
     c58:	bf c1       	rjmp	.+894    	; 0xfd8 <vfprintf+0x39a>
     c5a:	ce 01       	movw	r24, r28
     c5c:	01 96       	adiw	r24, 0x01	; 1
     c5e:	3c 01       	movw	r6, r24
     c60:	f6 01       	movw	r30, r12
     c62:	93 81       	ldd	r25, Z+3	; 0x03
     c64:	f7 01       	movw	r30, r14
     c66:	93 fd       	sbrc	r25, 3
     c68:	85 91       	lpm	r24, Z+
     c6a:	93 ff       	sbrs	r25, 3
     c6c:	81 91       	ld	r24, Z+
     c6e:	7f 01       	movw	r14, r30
     c70:	88 23       	and	r24, r24
     c72:	09 f4       	brne	.+2      	; 0xc76 <vfprintf+0x38>
     c74:	ad c1       	rjmp	.+858    	; 0xfd0 <vfprintf+0x392>
     c76:	85 32       	cpi	r24, 0x25	; 37
     c78:	39 f4       	brne	.+14     	; 0xc88 <vfprintf+0x4a>
     c7a:	93 fd       	sbrc	r25, 3
     c7c:	85 91       	lpm	r24, Z+
     c7e:	93 ff       	sbrs	r25, 3
     c80:	81 91       	ld	r24, Z+
     c82:	7f 01       	movw	r14, r30
     c84:	85 32       	cpi	r24, 0x25	; 37
     c86:	21 f4       	brne	.+8      	; 0xc90 <vfprintf+0x52>
     c88:	b6 01       	movw	r22, r12
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	c0 d1       	rcall	.+896    	; 0x100e <fputc>
     c8e:	e8 cf       	rjmp	.-48     	; 0xc60 <vfprintf+0x22>
     c90:	91 2c       	mov	r9, r1
     c92:	21 2c       	mov	r2, r1
     c94:	31 2c       	mov	r3, r1
     c96:	ff e1       	ldi	r31, 0x1F	; 31
     c98:	f3 15       	cp	r31, r3
     c9a:	d8 f0       	brcs	.+54     	; 0xcd2 <vfprintf+0x94>
     c9c:	8b 32       	cpi	r24, 0x2B	; 43
     c9e:	79 f0       	breq	.+30     	; 0xcbe <vfprintf+0x80>
     ca0:	38 f4       	brcc	.+14     	; 0xcb0 <vfprintf+0x72>
     ca2:	80 32       	cpi	r24, 0x20	; 32
     ca4:	79 f0       	breq	.+30     	; 0xcc4 <vfprintf+0x86>
     ca6:	83 32       	cpi	r24, 0x23	; 35
     ca8:	a1 f4       	brne	.+40     	; 0xcd2 <vfprintf+0x94>
     caa:	23 2d       	mov	r18, r3
     cac:	20 61       	ori	r18, 0x10	; 16
     cae:	1d c0       	rjmp	.+58     	; 0xcea <vfprintf+0xac>
     cb0:	8d 32       	cpi	r24, 0x2D	; 45
     cb2:	61 f0       	breq	.+24     	; 0xccc <vfprintf+0x8e>
     cb4:	80 33       	cpi	r24, 0x30	; 48
     cb6:	69 f4       	brne	.+26     	; 0xcd2 <vfprintf+0x94>
     cb8:	23 2d       	mov	r18, r3
     cba:	21 60       	ori	r18, 0x01	; 1
     cbc:	16 c0       	rjmp	.+44     	; 0xcea <vfprintf+0xac>
     cbe:	83 2d       	mov	r24, r3
     cc0:	82 60       	ori	r24, 0x02	; 2
     cc2:	38 2e       	mov	r3, r24
     cc4:	e3 2d       	mov	r30, r3
     cc6:	e4 60       	ori	r30, 0x04	; 4
     cc8:	3e 2e       	mov	r3, r30
     cca:	2a c0       	rjmp	.+84     	; 0xd20 <vfprintf+0xe2>
     ccc:	f3 2d       	mov	r31, r3
     cce:	f8 60       	ori	r31, 0x08	; 8
     cd0:	1d c0       	rjmp	.+58     	; 0xd0c <vfprintf+0xce>
     cd2:	37 fc       	sbrc	r3, 7
     cd4:	2d c0       	rjmp	.+90     	; 0xd30 <vfprintf+0xf2>
     cd6:	20 ed       	ldi	r18, 0xD0	; 208
     cd8:	28 0f       	add	r18, r24
     cda:	2a 30       	cpi	r18, 0x0A	; 10
     cdc:	40 f0       	brcs	.+16     	; 0xcee <vfprintf+0xb0>
     cde:	8e 32       	cpi	r24, 0x2E	; 46
     ce0:	b9 f4       	brne	.+46     	; 0xd10 <vfprintf+0xd2>
     ce2:	36 fc       	sbrc	r3, 6
     ce4:	75 c1       	rjmp	.+746    	; 0xfd0 <vfprintf+0x392>
     ce6:	23 2d       	mov	r18, r3
     ce8:	20 64       	ori	r18, 0x40	; 64
     cea:	32 2e       	mov	r3, r18
     cec:	19 c0       	rjmp	.+50     	; 0xd20 <vfprintf+0xe2>
     cee:	36 fe       	sbrs	r3, 6
     cf0:	06 c0       	rjmp	.+12     	; 0xcfe <vfprintf+0xc0>
     cf2:	8a e0       	ldi	r24, 0x0A	; 10
     cf4:	98 9e       	mul	r9, r24
     cf6:	20 0d       	add	r18, r0
     cf8:	11 24       	eor	r1, r1
     cfa:	92 2e       	mov	r9, r18
     cfc:	11 c0       	rjmp	.+34     	; 0xd20 <vfprintf+0xe2>
     cfe:	ea e0       	ldi	r30, 0x0A	; 10
     d00:	2e 9e       	mul	r2, r30
     d02:	20 0d       	add	r18, r0
     d04:	11 24       	eor	r1, r1
     d06:	22 2e       	mov	r2, r18
     d08:	f3 2d       	mov	r31, r3
     d0a:	f0 62       	ori	r31, 0x20	; 32
     d0c:	3f 2e       	mov	r3, r31
     d0e:	08 c0       	rjmp	.+16     	; 0xd20 <vfprintf+0xe2>
     d10:	8c 36       	cpi	r24, 0x6C	; 108
     d12:	21 f4       	brne	.+8      	; 0xd1c <vfprintf+0xde>
     d14:	83 2d       	mov	r24, r3
     d16:	80 68       	ori	r24, 0x80	; 128
     d18:	38 2e       	mov	r3, r24
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <vfprintf+0xe2>
     d1c:	88 36       	cpi	r24, 0x68	; 104
     d1e:	41 f4       	brne	.+16     	; 0xd30 <vfprintf+0xf2>
     d20:	f7 01       	movw	r30, r14
     d22:	93 fd       	sbrc	r25, 3
     d24:	85 91       	lpm	r24, Z+
     d26:	93 ff       	sbrs	r25, 3
     d28:	81 91       	ld	r24, Z+
     d2a:	7f 01       	movw	r14, r30
     d2c:	81 11       	cpse	r24, r1
     d2e:	b3 cf       	rjmp	.-154    	; 0xc96 <vfprintf+0x58>
     d30:	98 2f       	mov	r25, r24
     d32:	9f 7d       	andi	r25, 0xDF	; 223
     d34:	95 54       	subi	r25, 0x45	; 69
     d36:	93 30       	cpi	r25, 0x03	; 3
     d38:	28 f4       	brcc	.+10     	; 0xd44 <vfprintf+0x106>
     d3a:	0c 5f       	subi	r16, 0xFC	; 252
     d3c:	1f 4f       	sbci	r17, 0xFF	; 255
     d3e:	9f e3       	ldi	r25, 0x3F	; 63
     d40:	99 83       	std	Y+1, r25	; 0x01
     d42:	0d c0       	rjmp	.+26     	; 0xd5e <vfprintf+0x120>
     d44:	83 36       	cpi	r24, 0x63	; 99
     d46:	31 f0       	breq	.+12     	; 0xd54 <vfprintf+0x116>
     d48:	83 37       	cpi	r24, 0x73	; 115
     d4a:	71 f0       	breq	.+28     	; 0xd68 <vfprintf+0x12a>
     d4c:	83 35       	cpi	r24, 0x53	; 83
     d4e:	09 f0       	breq	.+2      	; 0xd52 <vfprintf+0x114>
     d50:	55 c0       	rjmp	.+170    	; 0xdfc <vfprintf+0x1be>
     d52:	20 c0       	rjmp	.+64     	; 0xd94 <vfprintf+0x156>
     d54:	f8 01       	movw	r30, r16
     d56:	80 81       	ld	r24, Z
     d58:	89 83       	std	Y+1, r24	; 0x01
     d5a:	0e 5f       	subi	r16, 0xFE	; 254
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	88 24       	eor	r8, r8
     d60:	83 94       	inc	r8
     d62:	91 2c       	mov	r9, r1
     d64:	53 01       	movw	r10, r6
     d66:	12 c0       	rjmp	.+36     	; 0xd8c <vfprintf+0x14e>
     d68:	28 01       	movw	r4, r16
     d6a:	f2 e0       	ldi	r31, 0x02	; 2
     d6c:	4f 0e       	add	r4, r31
     d6e:	51 1c       	adc	r5, r1
     d70:	f8 01       	movw	r30, r16
     d72:	a0 80       	ld	r10, Z
     d74:	b1 80       	ldd	r11, Z+1	; 0x01
     d76:	36 fe       	sbrs	r3, 6
     d78:	03 c0       	rjmp	.+6      	; 0xd80 <vfprintf+0x142>
     d7a:	69 2d       	mov	r22, r9
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <vfprintf+0x146>
     d80:	6f ef       	ldi	r22, 0xFF	; 255
     d82:	7f ef       	ldi	r23, 0xFF	; 255
     d84:	c5 01       	movw	r24, r10
     d86:	38 d1       	rcall	.+624    	; 0xff8 <strnlen>
     d88:	4c 01       	movw	r8, r24
     d8a:	82 01       	movw	r16, r4
     d8c:	f3 2d       	mov	r31, r3
     d8e:	ff 77       	andi	r31, 0x7F	; 127
     d90:	3f 2e       	mov	r3, r31
     d92:	15 c0       	rjmp	.+42     	; 0xdbe <vfprintf+0x180>
     d94:	28 01       	movw	r4, r16
     d96:	22 e0       	ldi	r18, 0x02	; 2
     d98:	42 0e       	add	r4, r18
     d9a:	51 1c       	adc	r5, r1
     d9c:	f8 01       	movw	r30, r16
     d9e:	a0 80       	ld	r10, Z
     da0:	b1 80       	ldd	r11, Z+1	; 0x01
     da2:	36 fe       	sbrs	r3, 6
     da4:	03 c0       	rjmp	.+6      	; 0xdac <vfprintf+0x16e>
     da6:	69 2d       	mov	r22, r9
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <vfprintf+0x172>
     dac:	6f ef       	ldi	r22, 0xFF	; 255
     dae:	7f ef       	ldi	r23, 0xFF	; 255
     db0:	c5 01       	movw	r24, r10
     db2:	17 d1       	rcall	.+558    	; 0xfe2 <strnlen_P>
     db4:	4c 01       	movw	r8, r24
     db6:	f3 2d       	mov	r31, r3
     db8:	f0 68       	ori	r31, 0x80	; 128
     dba:	3f 2e       	mov	r3, r31
     dbc:	82 01       	movw	r16, r4
     dbe:	33 fc       	sbrc	r3, 3
     dc0:	19 c0       	rjmp	.+50     	; 0xdf4 <vfprintf+0x1b6>
     dc2:	82 2d       	mov	r24, r2
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	88 16       	cp	r8, r24
     dc8:	99 06       	cpc	r9, r25
     dca:	a0 f4       	brcc	.+40     	; 0xdf4 <vfprintf+0x1b6>
     dcc:	b6 01       	movw	r22, r12
     dce:	80 e2       	ldi	r24, 0x20	; 32
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	1d d1       	rcall	.+570    	; 0x100e <fputc>
     dd4:	2a 94       	dec	r2
     dd6:	f5 cf       	rjmp	.-22     	; 0xdc2 <vfprintf+0x184>
     dd8:	f5 01       	movw	r30, r10
     dda:	37 fc       	sbrc	r3, 7
     ddc:	85 91       	lpm	r24, Z+
     dde:	37 fe       	sbrs	r3, 7
     de0:	81 91       	ld	r24, Z+
     de2:	5f 01       	movw	r10, r30
     de4:	b6 01       	movw	r22, r12
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	12 d1       	rcall	.+548    	; 0x100e <fputc>
     dea:	21 10       	cpse	r2, r1
     dec:	2a 94       	dec	r2
     dee:	21 e0       	ldi	r18, 0x01	; 1
     df0:	82 1a       	sub	r8, r18
     df2:	91 08       	sbc	r9, r1
     df4:	81 14       	cp	r8, r1
     df6:	91 04       	cpc	r9, r1
     df8:	79 f7       	brne	.-34     	; 0xdd8 <vfprintf+0x19a>
     dfa:	e1 c0       	rjmp	.+450    	; 0xfbe <vfprintf+0x380>
     dfc:	84 36       	cpi	r24, 0x64	; 100
     dfe:	11 f0       	breq	.+4      	; 0xe04 <vfprintf+0x1c6>
     e00:	89 36       	cpi	r24, 0x69	; 105
     e02:	39 f5       	brne	.+78     	; 0xe52 <vfprintf+0x214>
     e04:	f8 01       	movw	r30, r16
     e06:	37 fe       	sbrs	r3, 7
     e08:	07 c0       	rjmp	.+14     	; 0xe18 <vfprintf+0x1da>
     e0a:	60 81       	ld	r22, Z
     e0c:	71 81       	ldd	r23, Z+1	; 0x01
     e0e:	82 81       	ldd	r24, Z+2	; 0x02
     e10:	93 81       	ldd	r25, Z+3	; 0x03
     e12:	0c 5f       	subi	r16, 0xFC	; 252
     e14:	1f 4f       	sbci	r17, 0xFF	; 255
     e16:	08 c0       	rjmp	.+16     	; 0xe28 <vfprintf+0x1ea>
     e18:	60 81       	ld	r22, Z
     e1a:	71 81       	ldd	r23, Z+1	; 0x01
     e1c:	07 2e       	mov	r0, r23
     e1e:	00 0c       	add	r0, r0
     e20:	88 0b       	sbc	r24, r24
     e22:	99 0b       	sbc	r25, r25
     e24:	0e 5f       	subi	r16, 0xFE	; 254
     e26:	1f 4f       	sbci	r17, 0xFF	; 255
     e28:	f3 2d       	mov	r31, r3
     e2a:	ff 76       	andi	r31, 0x6F	; 111
     e2c:	3f 2e       	mov	r3, r31
     e2e:	97 ff       	sbrs	r25, 7
     e30:	09 c0       	rjmp	.+18     	; 0xe44 <vfprintf+0x206>
     e32:	90 95       	com	r25
     e34:	80 95       	com	r24
     e36:	70 95       	com	r23
     e38:	61 95       	neg	r22
     e3a:	7f 4f       	sbci	r23, 0xFF	; 255
     e3c:	8f 4f       	sbci	r24, 0xFF	; 255
     e3e:	9f 4f       	sbci	r25, 0xFF	; 255
     e40:	f0 68       	ori	r31, 0x80	; 128
     e42:	3f 2e       	mov	r3, r31
     e44:	2a e0       	ldi	r18, 0x0A	; 10
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	a3 01       	movw	r20, r6
     e4a:	1d d1       	rcall	.+570    	; 0x1086 <__ultoa_invert>
     e4c:	88 2e       	mov	r8, r24
     e4e:	86 18       	sub	r8, r6
     e50:	44 c0       	rjmp	.+136    	; 0xeda <vfprintf+0x29c>
     e52:	85 37       	cpi	r24, 0x75	; 117
     e54:	31 f4       	brne	.+12     	; 0xe62 <vfprintf+0x224>
     e56:	23 2d       	mov	r18, r3
     e58:	2f 7e       	andi	r18, 0xEF	; 239
     e5a:	b2 2e       	mov	r11, r18
     e5c:	2a e0       	ldi	r18, 0x0A	; 10
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	25 c0       	rjmp	.+74     	; 0xeac <vfprintf+0x26e>
     e62:	93 2d       	mov	r25, r3
     e64:	99 7f       	andi	r25, 0xF9	; 249
     e66:	b9 2e       	mov	r11, r25
     e68:	8f 36       	cpi	r24, 0x6F	; 111
     e6a:	c1 f0       	breq	.+48     	; 0xe9c <vfprintf+0x25e>
     e6c:	18 f4       	brcc	.+6      	; 0xe74 <vfprintf+0x236>
     e6e:	88 35       	cpi	r24, 0x58	; 88
     e70:	79 f0       	breq	.+30     	; 0xe90 <vfprintf+0x252>
     e72:	ae c0       	rjmp	.+348    	; 0xfd0 <vfprintf+0x392>
     e74:	80 37       	cpi	r24, 0x70	; 112
     e76:	19 f0       	breq	.+6      	; 0xe7e <vfprintf+0x240>
     e78:	88 37       	cpi	r24, 0x78	; 120
     e7a:	21 f0       	breq	.+8      	; 0xe84 <vfprintf+0x246>
     e7c:	a9 c0       	rjmp	.+338    	; 0xfd0 <vfprintf+0x392>
     e7e:	e9 2f       	mov	r30, r25
     e80:	e0 61       	ori	r30, 0x10	; 16
     e82:	be 2e       	mov	r11, r30
     e84:	b4 fe       	sbrs	r11, 4
     e86:	0d c0       	rjmp	.+26     	; 0xea2 <vfprintf+0x264>
     e88:	fb 2d       	mov	r31, r11
     e8a:	f4 60       	ori	r31, 0x04	; 4
     e8c:	bf 2e       	mov	r11, r31
     e8e:	09 c0       	rjmp	.+18     	; 0xea2 <vfprintf+0x264>
     e90:	34 fe       	sbrs	r3, 4
     e92:	0a c0       	rjmp	.+20     	; 0xea8 <vfprintf+0x26a>
     e94:	29 2f       	mov	r18, r25
     e96:	26 60       	ori	r18, 0x06	; 6
     e98:	b2 2e       	mov	r11, r18
     e9a:	06 c0       	rjmp	.+12     	; 0xea8 <vfprintf+0x26a>
     e9c:	28 e0       	ldi	r18, 0x08	; 8
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	05 c0       	rjmp	.+10     	; 0xeac <vfprintf+0x26e>
     ea2:	20 e1       	ldi	r18, 0x10	; 16
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <vfprintf+0x26e>
     ea8:	20 e1       	ldi	r18, 0x10	; 16
     eaa:	32 e0       	ldi	r19, 0x02	; 2
     eac:	f8 01       	movw	r30, r16
     eae:	b7 fe       	sbrs	r11, 7
     eb0:	07 c0       	rjmp	.+14     	; 0xec0 <vfprintf+0x282>
     eb2:	60 81       	ld	r22, Z
     eb4:	71 81       	ldd	r23, Z+1	; 0x01
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	93 81       	ldd	r25, Z+3	; 0x03
     eba:	0c 5f       	subi	r16, 0xFC	; 252
     ebc:	1f 4f       	sbci	r17, 0xFF	; 255
     ebe:	06 c0       	rjmp	.+12     	; 0xecc <vfprintf+0x28e>
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 5f       	subi	r16, 0xFE	; 254
     eca:	1f 4f       	sbci	r17, 0xFF	; 255
     ecc:	a3 01       	movw	r20, r6
     ece:	db d0       	rcall	.+438    	; 0x1086 <__ultoa_invert>
     ed0:	88 2e       	mov	r8, r24
     ed2:	86 18       	sub	r8, r6
     ed4:	fb 2d       	mov	r31, r11
     ed6:	ff 77       	andi	r31, 0x7F	; 127
     ed8:	3f 2e       	mov	r3, r31
     eda:	36 fe       	sbrs	r3, 6
     edc:	0d c0       	rjmp	.+26     	; 0xef8 <vfprintf+0x2ba>
     ede:	23 2d       	mov	r18, r3
     ee0:	2e 7f       	andi	r18, 0xFE	; 254
     ee2:	a2 2e       	mov	r10, r18
     ee4:	89 14       	cp	r8, r9
     ee6:	58 f4       	brcc	.+22     	; 0xefe <vfprintf+0x2c0>
     ee8:	34 fe       	sbrs	r3, 4
     eea:	0b c0       	rjmp	.+22     	; 0xf02 <vfprintf+0x2c4>
     eec:	32 fc       	sbrc	r3, 2
     eee:	09 c0       	rjmp	.+18     	; 0xf02 <vfprintf+0x2c4>
     ef0:	83 2d       	mov	r24, r3
     ef2:	8e 7e       	andi	r24, 0xEE	; 238
     ef4:	a8 2e       	mov	r10, r24
     ef6:	05 c0       	rjmp	.+10     	; 0xf02 <vfprintf+0x2c4>
     ef8:	b8 2c       	mov	r11, r8
     efa:	a3 2c       	mov	r10, r3
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <vfprintf+0x2c6>
     efe:	b8 2c       	mov	r11, r8
     f00:	01 c0       	rjmp	.+2      	; 0xf04 <vfprintf+0x2c6>
     f02:	b9 2c       	mov	r11, r9
     f04:	a4 fe       	sbrs	r10, 4
     f06:	0f c0       	rjmp	.+30     	; 0xf26 <vfprintf+0x2e8>
     f08:	fe 01       	movw	r30, r28
     f0a:	e8 0d       	add	r30, r8
     f0c:	f1 1d       	adc	r31, r1
     f0e:	80 81       	ld	r24, Z
     f10:	80 33       	cpi	r24, 0x30	; 48
     f12:	21 f4       	brne	.+8      	; 0xf1c <vfprintf+0x2de>
     f14:	9a 2d       	mov	r25, r10
     f16:	99 7e       	andi	r25, 0xE9	; 233
     f18:	a9 2e       	mov	r10, r25
     f1a:	09 c0       	rjmp	.+18     	; 0xf2e <vfprintf+0x2f0>
     f1c:	a2 fe       	sbrs	r10, 2
     f1e:	06 c0       	rjmp	.+12     	; 0xf2c <vfprintf+0x2ee>
     f20:	b3 94       	inc	r11
     f22:	b3 94       	inc	r11
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <vfprintf+0x2f0>
     f26:	8a 2d       	mov	r24, r10
     f28:	86 78       	andi	r24, 0x86	; 134
     f2a:	09 f0       	breq	.+2      	; 0xf2e <vfprintf+0x2f0>
     f2c:	b3 94       	inc	r11
     f2e:	a3 fc       	sbrc	r10, 3
     f30:	10 c0       	rjmp	.+32     	; 0xf52 <vfprintf+0x314>
     f32:	a0 fe       	sbrs	r10, 0
     f34:	06 c0       	rjmp	.+12     	; 0xf42 <vfprintf+0x304>
     f36:	b2 14       	cp	r11, r2
     f38:	80 f4       	brcc	.+32     	; 0xf5a <vfprintf+0x31c>
     f3a:	28 0c       	add	r2, r8
     f3c:	92 2c       	mov	r9, r2
     f3e:	9b 18       	sub	r9, r11
     f40:	0d c0       	rjmp	.+26     	; 0xf5c <vfprintf+0x31e>
     f42:	b2 14       	cp	r11, r2
     f44:	58 f4       	brcc	.+22     	; 0xf5c <vfprintf+0x31e>
     f46:	b6 01       	movw	r22, r12
     f48:	80 e2       	ldi	r24, 0x20	; 32
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	60 d0       	rcall	.+192    	; 0x100e <fputc>
     f4e:	b3 94       	inc	r11
     f50:	f8 cf       	rjmp	.-16     	; 0xf42 <vfprintf+0x304>
     f52:	b2 14       	cp	r11, r2
     f54:	18 f4       	brcc	.+6      	; 0xf5c <vfprintf+0x31e>
     f56:	2b 18       	sub	r2, r11
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <vfprintf+0x320>
     f5a:	98 2c       	mov	r9, r8
     f5c:	21 2c       	mov	r2, r1
     f5e:	a4 fe       	sbrs	r10, 4
     f60:	0f c0       	rjmp	.+30     	; 0xf80 <vfprintf+0x342>
     f62:	b6 01       	movw	r22, r12
     f64:	80 e3       	ldi	r24, 0x30	; 48
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	52 d0       	rcall	.+164    	; 0x100e <fputc>
     f6a:	a2 fe       	sbrs	r10, 2
     f6c:	16 c0       	rjmp	.+44     	; 0xf9a <vfprintf+0x35c>
     f6e:	a1 fc       	sbrc	r10, 1
     f70:	03 c0       	rjmp	.+6      	; 0xf78 <vfprintf+0x33a>
     f72:	88 e7       	ldi	r24, 0x78	; 120
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <vfprintf+0x33e>
     f78:	88 e5       	ldi	r24, 0x58	; 88
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	b6 01       	movw	r22, r12
     f7e:	0c c0       	rjmp	.+24     	; 0xf98 <vfprintf+0x35a>
     f80:	8a 2d       	mov	r24, r10
     f82:	86 78       	andi	r24, 0x86	; 134
     f84:	51 f0       	breq	.+20     	; 0xf9a <vfprintf+0x35c>
     f86:	a1 fe       	sbrs	r10, 1
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <vfprintf+0x350>
     f8a:	8b e2       	ldi	r24, 0x2B	; 43
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <vfprintf+0x352>
     f8e:	80 e2       	ldi	r24, 0x20	; 32
     f90:	a7 fc       	sbrc	r10, 7
     f92:	8d e2       	ldi	r24, 0x2D	; 45
     f94:	b6 01       	movw	r22, r12
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	3a d0       	rcall	.+116    	; 0x100e <fputc>
     f9a:	89 14       	cp	r8, r9
     f9c:	30 f4       	brcc	.+12     	; 0xfaa <vfprintf+0x36c>
     f9e:	b6 01       	movw	r22, r12
     fa0:	80 e3       	ldi	r24, 0x30	; 48
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	34 d0       	rcall	.+104    	; 0x100e <fputc>
     fa6:	9a 94       	dec	r9
     fa8:	f8 cf       	rjmp	.-16     	; 0xf9a <vfprintf+0x35c>
     faa:	8a 94       	dec	r8
     fac:	f3 01       	movw	r30, r6
     fae:	e8 0d       	add	r30, r8
     fb0:	f1 1d       	adc	r31, r1
     fb2:	80 81       	ld	r24, Z
     fb4:	b6 01       	movw	r22, r12
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	2a d0       	rcall	.+84     	; 0x100e <fputc>
     fba:	81 10       	cpse	r8, r1
     fbc:	f6 cf       	rjmp	.-20     	; 0xfaa <vfprintf+0x36c>
     fbe:	22 20       	and	r2, r2
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <vfprintf+0x386>
     fc2:	4e ce       	rjmp	.-868    	; 0xc60 <vfprintf+0x22>
     fc4:	b6 01       	movw	r22, r12
     fc6:	80 e2       	ldi	r24, 0x20	; 32
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	21 d0       	rcall	.+66     	; 0x100e <fputc>
     fcc:	2a 94       	dec	r2
     fce:	f7 cf       	rjmp	.-18     	; 0xfbe <vfprintf+0x380>
     fd0:	f6 01       	movw	r30, r12
     fd2:	86 81       	ldd	r24, Z+6	; 0x06
     fd4:	97 81       	ldd	r25, Z+7	; 0x07
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <vfprintf+0x39e>
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	9f ef       	ldi	r25, 0xFF	; 255
     fdc:	2b 96       	adiw	r28, 0x0b	; 11
     fde:	e2 e1       	ldi	r30, 0x12	; 18
     fe0:	c9 c0       	rjmp	.+402    	; 0x1174 <__epilogue_restores__>

00000fe2 <strnlen_P>:
     fe2:	fc 01       	movw	r30, r24
     fe4:	05 90       	lpm	r0, Z+
     fe6:	61 50       	subi	r22, 0x01	; 1
     fe8:	70 40       	sbci	r23, 0x00	; 0
     fea:	01 10       	cpse	r0, r1
     fec:	d8 f7       	brcc	.-10     	; 0xfe4 <strnlen_P+0x2>
     fee:	80 95       	com	r24
     ff0:	90 95       	com	r25
     ff2:	8e 0f       	add	r24, r30
     ff4:	9f 1f       	adc	r25, r31
     ff6:	08 95       	ret

00000ff8 <strnlen>:
     ff8:	fc 01       	movw	r30, r24
     ffa:	61 50       	subi	r22, 0x01	; 1
     ffc:	70 40       	sbci	r23, 0x00	; 0
     ffe:	01 90       	ld	r0, Z+
    1000:	01 10       	cpse	r0, r1
    1002:	d8 f7       	brcc	.-10     	; 0xffa <strnlen+0x2>
    1004:	80 95       	com	r24
    1006:	90 95       	com	r25
    1008:	8e 0f       	add	r24, r30
    100a:	9f 1f       	adc	r25, r31
    100c:	08 95       	ret

0000100e <fputc>:
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	fb 01       	movw	r30, r22
    1018:	23 81       	ldd	r18, Z+3	; 0x03
    101a:	21 fd       	sbrc	r18, 1
    101c:	03 c0       	rjmp	.+6      	; 0x1024 <fputc+0x16>
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	9f ef       	ldi	r25, 0xFF	; 255
    1022:	2c c0       	rjmp	.+88     	; 0x107c <fputc+0x6e>
    1024:	22 ff       	sbrs	r18, 2
    1026:	16 c0       	rjmp	.+44     	; 0x1054 <fputc+0x46>
    1028:	46 81       	ldd	r20, Z+6	; 0x06
    102a:	57 81       	ldd	r21, Z+7	; 0x07
    102c:	24 81       	ldd	r18, Z+4	; 0x04
    102e:	35 81       	ldd	r19, Z+5	; 0x05
    1030:	42 17       	cp	r20, r18
    1032:	53 07       	cpc	r21, r19
    1034:	44 f4       	brge	.+16     	; 0x1046 <fputc+0x38>
    1036:	a0 81       	ld	r26, Z
    1038:	b1 81       	ldd	r27, Z+1	; 0x01
    103a:	9d 01       	movw	r18, r26
    103c:	2f 5f       	subi	r18, 0xFF	; 255
    103e:	3f 4f       	sbci	r19, 0xFF	; 255
    1040:	20 83       	st	Z, r18
    1042:	31 83       	std	Z+1, r19	; 0x01
    1044:	8c 93       	st	X, r24
    1046:	26 81       	ldd	r18, Z+6	; 0x06
    1048:	37 81       	ldd	r19, Z+7	; 0x07
    104a:	2f 5f       	subi	r18, 0xFF	; 255
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
    104e:	26 83       	std	Z+6, r18	; 0x06
    1050:	37 83       	std	Z+7, r19	; 0x07
    1052:	14 c0       	rjmp	.+40     	; 0x107c <fputc+0x6e>
    1054:	8b 01       	movw	r16, r22
    1056:	ec 01       	movw	r28, r24
    1058:	fb 01       	movw	r30, r22
    105a:	00 84       	ldd	r0, Z+8	; 0x08
    105c:	f1 85       	ldd	r31, Z+9	; 0x09
    105e:	e0 2d       	mov	r30, r0
    1060:	09 95       	icall
    1062:	89 2b       	or	r24, r25
    1064:	e1 f6       	brne	.-72     	; 0x101e <fputc+0x10>
    1066:	d8 01       	movw	r26, r16
    1068:	16 96       	adiw	r26, 0x06	; 6
    106a:	8d 91       	ld	r24, X+
    106c:	9c 91       	ld	r25, X
    106e:	17 97       	sbiw	r26, 0x07	; 7
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	16 96       	adiw	r26, 0x06	; 6
    1074:	8d 93       	st	X+, r24
    1076:	9c 93       	st	X, r25
    1078:	17 97       	sbiw	r26, 0x07	; 7
    107a:	ce 01       	movw	r24, r28
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	08 95       	ret

00001086 <__ultoa_invert>:
    1086:	fa 01       	movw	r30, r20
    1088:	aa 27       	eor	r26, r26
    108a:	28 30       	cpi	r18, 0x08	; 8
    108c:	51 f1       	breq	.+84     	; 0x10e2 <__ultoa_invert+0x5c>
    108e:	20 31       	cpi	r18, 0x10	; 16
    1090:	81 f1       	breq	.+96     	; 0x10f2 <__ultoa_invert+0x6c>
    1092:	e8 94       	clt
    1094:	6f 93       	push	r22
    1096:	6e 7f       	andi	r22, 0xFE	; 254
    1098:	6e 5f       	subi	r22, 0xFE	; 254
    109a:	7f 4f       	sbci	r23, 0xFF	; 255
    109c:	8f 4f       	sbci	r24, 0xFF	; 255
    109e:	9f 4f       	sbci	r25, 0xFF	; 255
    10a0:	af 4f       	sbci	r26, 0xFF	; 255
    10a2:	b1 e0       	ldi	r27, 0x01	; 1
    10a4:	3e d0       	rcall	.+124    	; 0x1122 <__ultoa_invert+0x9c>
    10a6:	b4 e0       	ldi	r27, 0x04	; 4
    10a8:	3c d0       	rcall	.+120    	; 0x1122 <__ultoa_invert+0x9c>
    10aa:	67 0f       	add	r22, r23
    10ac:	78 1f       	adc	r23, r24
    10ae:	89 1f       	adc	r24, r25
    10b0:	9a 1f       	adc	r25, r26
    10b2:	a1 1d       	adc	r26, r1
    10b4:	68 0f       	add	r22, r24
    10b6:	79 1f       	adc	r23, r25
    10b8:	8a 1f       	adc	r24, r26
    10ba:	91 1d       	adc	r25, r1
    10bc:	a1 1d       	adc	r26, r1
    10be:	6a 0f       	add	r22, r26
    10c0:	71 1d       	adc	r23, r1
    10c2:	81 1d       	adc	r24, r1
    10c4:	91 1d       	adc	r25, r1
    10c6:	a1 1d       	adc	r26, r1
    10c8:	20 d0       	rcall	.+64     	; 0x110a <__ultoa_invert+0x84>
    10ca:	09 f4       	brne	.+2      	; 0x10ce <__ultoa_invert+0x48>
    10cc:	68 94       	set
    10ce:	3f 91       	pop	r19
    10d0:	2a e0       	ldi	r18, 0x0A	; 10
    10d2:	26 9f       	mul	r18, r22
    10d4:	11 24       	eor	r1, r1
    10d6:	30 19       	sub	r19, r0
    10d8:	30 5d       	subi	r19, 0xD0	; 208
    10da:	31 93       	st	Z+, r19
    10dc:	de f6       	brtc	.-74     	; 0x1094 <__ultoa_invert+0xe>
    10de:	cf 01       	movw	r24, r30
    10e0:	08 95       	ret
    10e2:	46 2f       	mov	r20, r22
    10e4:	47 70       	andi	r20, 0x07	; 7
    10e6:	40 5d       	subi	r20, 0xD0	; 208
    10e8:	41 93       	st	Z+, r20
    10ea:	b3 e0       	ldi	r27, 0x03	; 3
    10ec:	0f d0       	rcall	.+30     	; 0x110c <__ultoa_invert+0x86>
    10ee:	c9 f7       	brne	.-14     	; 0x10e2 <__ultoa_invert+0x5c>
    10f0:	f6 cf       	rjmp	.-20     	; 0x10de <__ultoa_invert+0x58>
    10f2:	46 2f       	mov	r20, r22
    10f4:	4f 70       	andi	r20, 0x0F	; 15
    10f6:	40 5d       	subi	r20, 0xD0	; 208
    10f8:	4a 33       	cpi	r20, 0x3A	; 58
    10fa:	18 f0       	brcs	.+6      	; 0x1102 <__ultoa_invert+0x7c>
    10fc:	49 5d       	subi	r20, 0xD9	; 217
    10fe:	31 fd       	sbrc	r19, 1
    1100:	40 52       	subi	r20, 0x20	; 32
    1102:	41 93       	st	Z+, r20
    1104:	02 d0       	rcall	.+4      	; 0x110a <__ultoa_invert+0x84>
    1106:	a9 f7       	brne	.-22     	; 0x10f2 <__ultoa_invert+0x6c>
    1108:	ea cf       	rjmp	.-44     	; 0x10de <__ultoa_invert+0x58>
    110a:	b4 e0       	ldi	r27, 0x04	; 4
    110c:	a6 95       	lsr	r26
    110e:	97 95       	ror	r25
    1110:	87 95       	ror	r24
    1112:	77 95       	ror	r23
    1114:	67 95       	ror	r22
    1116:	ba 95       	dec	r27
    1118:	c9 f7       	brne	.-14     	; 0x110c <__ultoa_invert+0x86>
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	61 05       	cpc	r22, r1
    111e:	71 05       	cpc	r23, r1
    1120:	08 95       	ret
    1122:	9b 01       	movw	r18, r22
    1124:	ac 01       	movw	r20, r24
    1126:	0a 2e       	mov	r0, r26
    1128:	06 94       	lsr	r0
    112a:	57 95       	ror	r21
    112c:	47 95       	ror	r20
    112e:	37 95       	ror	r19
    1130:	27 95       	ror	r18
    1132:	ba 95       	dec	r27
    1134:	c9 f7       	brne	.-14     	; 0x1128 <__ultoa_invert+0xa2>
    1136:	62 0f       	add	r22, r18
    1138:	73 1f       	adc	r23, r19
    113a:	84 1f       	adc	r24, r20
    113c:	95 1f       	adc	r25, r21
    113e:	a0 1d       	adc	r26, r0
    1140:	08 95       	ret

00001142 <__prologue_saves__>:
    1142:	2f 92       	push	r2
    1144:	3f 92       	push	r3
    1146:	4f 92       	push	r4
    1148:	5f 92       	push	r5
    114a:	6f 92       	push	r6
    114c:	7f 92       	push	r7
    114e:	8f 92       	push	r8
    1150:	9f 92       	push	r9
    1152:	af 92       	push	r10
    1154:	bf 92       	push	r11
    1156:	cf 92       	push	r12
    1158:	df 92       	push	r13
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	ca 1b       	sub	r28, r26
    116c:	db 0b       	sbc	r29, r27
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	09 94       	ijmp

00001174 <__epilogue_restores__>:
    1174:	2a 88       	ldd	r2, Y+18	; 0x12
    1176:	39 88       	ldd	r3, Y+17	; 0x11
    1178:	48 88       	ldd	r4, Y+16	; 0x10
    117a:	5f 84       	ldd	r5, Y+15	; 0x0f
    117c:	6e 84       	ldd	r6, Y+14	; 0x0e
    117e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1180:	8c 84       	ldd	r8, Y+12	; 0x0c
    1182:	9b 84       	ldd	r9, Y+11	; 0x0b
    1184:	aa 84       	ldd	r10, Y+10	; 0x0a
    1186:	b9 84       	ldd	r11, Y+9	; 0x09
    1188:	c8 84       	ldd	r12, Y+8	; 0x08
    118a:	df 80       	ldd	r13, Y+7	; 0x07
    118c:	ee 80       	ldd	r14, Y+6	; 0x06
    118e:	fd 80       	ldd	r15, Y+5	; 0x05
    1190:	0c 81       	ldd	r16, Y+4	; 0x04
    1192:	1b 81       	ldd	r17, Y+3	; 0x03
    1194:	aa 81       	ldd	r26, Y+2	; 0x02
    1196:	b9 81       	ldd	r27, Y+1	; 0x01
    1198:	ce 0f       	add	r28, r30
    119a:	d1 1d       	adc	r29, r1
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	ed 01       	movw	r28, r26
    11a2:	08 95       	ret

000011a4 <_exit>:
    11a4:	f8 94       	cli

000011a6 <__stop_program>:
    11a6:	ff cf       	rjmp	.-2      	; 0x11a6 <__stop_program>
